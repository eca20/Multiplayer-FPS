{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 9
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeId": 11,
        "TypeDef": "Compact"
      },
      "11": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "12": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "13": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "14": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 15
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "15": {
        "TypeId": 16,
        "TypeDef": "Sequence"
      },
      "16": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "17": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "18": {
        "TypeId": 19,
        "TypeDef": "Sequence"
      },
      "19": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 112
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 20
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 20
          },
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "20": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 21
              }
            ],
            "Index": 0
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "pallet_grandpa::Event",
                "TypeId": 30
              }
            ],
            "Index": 3
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 35
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 37
              }
            ],
            "Index": 5
          },
          {
            "Name": "AssetTxPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_asset_tx_payment::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 6
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "pallet_assets::Event<Runtime>",
                "TypeId": 40
              }
            ],
            "Index": 7
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "orml_vesting::Event<Runtime>",
                "TypeId": 42
              }
            ],
            "Index": 8
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 45
              }
            ],
            "Index": 9
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 48
              }
            ],
            "Index": 10
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 49
              }
            ],
            "Index": 11
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 50
              }
            ],
            "Index": 12
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 55
              }
            ],
            "Index": 13
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 57
              }
            ],
            "Index": 14
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 60
              }
            ],
            "Index": 15
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 61
              }
            ],
            "Index": 16
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 64
              }
            ],
            "Index": 17
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 66
              }
            ],
            "Index": 18
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 67
              }
            ],
            "Index": 19
          },
          {
            "Name": "AwesomeAvatars",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_awesome_avatars::Event<Runtime>",
                "TypeId": 68
              }
            ],
            "Index": 22
          },
          {
            "Name": "Nft",
            "TypeFields": [
              {
                "TypeName": "pallet_nfts::Event<Runtime>",
                "TypeId": 93
              }
            ],
            "Index": 24
          },
          {
            "Name": "NftTransfer",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_nft_transfer::Event<Runtime>",
                "TypeId": 103
              }
            ],
            "Index": 25
          },
          {
            "Name": "NftStaking",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_nft_staking::Event<Runtime>",
                "TypeId": 104
              }
            ],
            "Index": 26
          },
          {
            "Name": "BattleMogs",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_battle_mogs::Event<Runtime>",
                "TypeId": 110
              }
            ],
            "Index": 27
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "21": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 25
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "22": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 23
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 24
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "23": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 26
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 27
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 28
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 29
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "27": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "NewAuthorities",
            "TypeFields": [
              {
                "Name": "authority_set",
                "TypeName": "AuthorityList",
                "TypeId": 31
              }
            ],
            "Index": 0,
            "Docs": [
              "New authority set has been applied."
            ]
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Current authority set has been paused."
            ]
          },
          {
            "Name": "Resumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Current authority set has been resumed."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "31": {
        "TypeId": 32,
        "TypeDef": "Sequence"
      },
      "32": {
        "TypeIds": [
          33,
          11
        ],
        "TypeDef": "Tuple"
      },
      "33": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Public",
            "TypeId": 34
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "34": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "35": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 36
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "AssetTxFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "AssetBalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "AssetBalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "asset_id",
                "TypeName": "Option<ChargeAssetIdOf<T>>",
                "TypeId": 39
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who` in an asset `asset_id`."
            ]
          }
        ],
        "Path": [
          "pallet_asset_tx_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "39": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "40": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Some asset class was created."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some assets were issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some assets were transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some assets were destroyed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Some account `who` was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Some account `who` was thawed."
            ]
          },
          {
            "Name": "AssetFrozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Some asset `asset_id` was frozen."
            ]
          },
          {
            "Name": "AssetThawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Some asset `asset_id` was thawed."
            ]
          },
          {
            "Name": "AccountsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "accounts_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "accounts_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Accounts were destroyed for given asset."
            ]
          },
          {
            "Name": "ApprovalsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "approvals_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "approvals_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Approvals were destroyed for given asset."
            ]
          },
          {
            "Name": "DestructionStarted",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An asset class is in the process of being destroyed."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "An asset class was destroyed."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Some asset class was force-created."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 15,
            "Docs": [
              "New metadata has been set for an asset."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been cleared for an asset."
            ]
          },
          {
            "Name": "ApprovedTransfer",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 18,
            "Docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ]
          },
          {
            "Name": "TransferredApproved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ]
          },
          {
            "Name": "AssetStatusChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ]
          },
          {
            "Name": "AssetMinBalanceChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "new_min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The min_balance of an asset has been updated by the asset owner."
            ]
          },
          {
            "Name": "Touched",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "depositor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 22,
            "Docs": [
              "Some account `who` was created with a deposit from `depositor`."
            ]
          },
          {
            "Name": "Blocked",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "Some account `who` was blocked."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "41": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "42": {
        "Variants": [
          {
            "Name": "VestingScheduleAdded",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vesting_schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 43
              }
            ],
            "Index": 0,
            "Docs": [
              "Added new vesting schedule."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Claimed vesting."
            ]
          },
          {
            "Name": "VestingSchedulesUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Updated vesting schedules."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "43": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "per_period",
            "TypeName": "Balance",
            "TypeId": 44
          }
        ],
        "Path": [
          "orml_vesting",
          "VestingSchedule"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "44": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "45": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "46": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 47
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 25
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 47
          },
          {
            "Name": "E",
            "TypeId": 25
          }
        ],
        "TypeDef": "Variant"
      },
      "47": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "48": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "49": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "50": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 51
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "until",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 52
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has secconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 54,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 54,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 54,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 54,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "51": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "52": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 53
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "54": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "55": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old_sudoer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 1,
            "Docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 2,
            "Docs": [
              "A sudo just took place. \\[result\\]"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "56": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "57": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 58
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 59
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 58
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 59
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 58
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 59
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 58
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 59
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "58": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "59": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "60": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "61": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "62": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "types",
          "proxy",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "64": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 65
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 65
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 65
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "65": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "66": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 46
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "67": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "68": {
        "Variants": [
          {
            "Name": "OrganizerSet",
            "TypeFields": [
              {
                "Name": "organizer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "An organizer has been set."
            ]
          },
          {
            "Name": "ServiceAccountSet",
            "TypeFields": [
              {
                "Name": "service_account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A service account has been set."
            ]
          },
          {
            "Name": "CollectionIdSet",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "A collection ID has been set."
            ]
          },
          {
            "Name": "TreasurerSet",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              },
              {
                "Name": "treasurer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A treasurer has been set for a season."
            ]
          },
          {
            "Name": "TreasuryClaimed",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              },
              {
                "Name": "treasurer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A season's treasury has been claimed by a treasurer."
            ]
          },
          {
            "Name": "UpdatedSeason",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              },
              {
                "Name": "season",
                "TypeName": "SeasonOf<T>",
                "TypeId": 69
              }
            ],
            "Index": 5,
            "Docs": [
              "The season configuration for {season_id} has been updated."
            ]
          },
          {
            "Name": "UpdatedGlobalConfig",
            "TypeFields": [
              {
                "TypeName": "GlobalConfigOf<T>",
                "TypeId": 81
              }
            ],
            "Index": 6,
            "Docs": [
              "Global configuration updated."
            ]
          },
          {
            "Name": "AvatarsMinted",
            "TypeFields": [
              {
                "Name": "avatar_ids",
                "TypeName": "Vec<AvatarIdOf<T>>",
                "TypeId": 89
              }
            ],
            "Index": 7,
            "Docs": [
              "Avatars minted."
            ]
          },
          {
            "Name": "AvatarsForged",
            "TypeFields": [
              {
                "Name": "avatar_ids",
                "TypeName": "Vec<(AvatarIdOf<T>, UpgradedComponents)>",
                "TypeId": 90
              }
            ],
            "Index": 8,
            "Docs": [
              "Avatar forged."
            ]
          },
          {
            "Name": "AvatarTransferred",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "Avatar transferred."
            ]
          },
          {
            "Name": "SeasonStarted",
            "TypeFields": [
              {
                "TypeName": "SeasonId",
                "TypeId": 63
              }
            ],
            "Index": 10,
            "Docs": [
              "A season has started."
            ]
          },
          {
            "Name": "SeasonFinished",
            "TypeFields": [
              {
                "TypeName": "SeasonId",
                "TypeId": 63
              }
            ],
            "Index": 11,
            "Docs": [
              "A season has finished."
            ]
          },
          {
            "Name": "FreeMintsTransferred",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "how_many",
                "TypeName": "MintCount",
                "TypeId": 63
              }
            ],
            "Index": 12,
            "Docs": [
              "Free mints transferred between accounts."
            ]
          },
          {
            "Name": "FreeMintsSet",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "how_many",
                "TypeName": "MintCount",
                "TypeId": 63
              }
            ],
            "Index": 13,
            "Docs": [
              "Free mints set for target account."
            ]
          },
          {
            "Name": "AvatarPriceSet",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Avatar has price set for trade."
            ]
          },
          {
            "Name": "AvatarPriceUnset",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 15,
            "Docs": [
              "Avatar has price removed for trade."
            ]
          },
          {
            "Name": "AvatarTraded",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 16,
            "Docs": [
              "Avatar has been traded."
            ]
          },
          {
            "Name": "AvatarLocked",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 17,
            "Docs": [
              "Avatar locked."
            ]
          },
          {
            "Name": "AvatarUnlocked",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 18,
            "Docs": [
              "Avatar unlocked."
            ]
          },
          {
            "Name": "StorageTierUpgraded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              }
            ],
            "Index": 19,
            "Docs": [
              "Storage tier has been upgraded."
            ]
          },
          {
            "Name": "PreparedAvatar",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 20,
            "Docs": [
              "Avatar prepared."
            ]
          },
          {
            "Name": "UnpreparedAvatar",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 21,
            "Docs": [
              "Avatar unprepared."
            ]
          },
          {
            "Name": "PreparedIpfsUrl",
            "TypeFields": [
              {
                "Name": "url",
                "TypeName": "IpfsUrl",
                "TypeId": 92
              }
            ],
            "Index": 22,
            "Docs": [
              "IPFS URL prepared."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "69": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, ConstU32<100>>",
            "TypeId": 70
          },
          {
            "Name": "description",
            "TypeName": "BoundedVec<u8, ConstU32<1_000>>",
            "TypeId": 71
          },
          {
            "Name": "early_start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "max_tier_forges",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_variations",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "max_components",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "min_sacrifices",
            "TypeName": "SacrificeCount",
            "TypeId": 2
          },
          {
            "Name": "max_sacrifices",
            "TypeName": "SacrificeCount",
            "TypeId": 2
          },
          {
            "Name": "tiers",
            "TypeName": "BoundedVec<RarityTier, ConstU32<6>>",
            "TypeId": 72
          },
          {
            "Name": "single_mint_probs",
            "TypeName": "BoundedVec<RarityPercent, ConstU32<5>>",
            "TypeId": 75
          },
          {
            "Name": "batch_mint_probs",
            "TypeName": "BoundedVec<RarityPercent, ConstU32<5>>",
            "TypeId": 75
          },
          {
            "Name": "base_prob",
            "TypeName": "RarityPercent",
            "TypeId": 2
          },
          {
            "Name": "per_period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "periods",
            "TypeName": "u16",
            "TypeId": 63
          },
          {
            "Name": "trade_filters",
            "TypeName": "BoundedVec<TradeFilter, ConstU32<100>>",
            "TypeId": 76
          },
          {
            "Name": "fee",
            "TypeName": "Fee<Balance>",
            "TypeId": 78
          },
          {
            "Name": "mint_logic",
            "TypeName": "LogicGeneration",
            "TypeId": 80
          },
          {
            "Name": "forge_logic",
            "TypeName": "LogicGeneration",
            "TypeId": 80
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "season",
          "Season"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "70": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "71": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "72": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 74
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 73
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "73": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Common",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Uncommon",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Rare",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Epic",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legendary",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Mythical",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "avatar",
          "rarity_tier",
          "RarityTier"
        ],
        "TypeDef": "Variant"
      },
      "74": {
        "TypeId": 73,
        "TypeDef": "Sequence"
      },
      "75": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "76": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 77
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "78": {
        "TypeFields": [
          {
            "Name": "mint",
            "TypeName": "MintFees<Balance>",
            "TypeId": 79
          },
          {
            "Name": "transfer_avatar",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "buy_minimum",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "buy_percent",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "upgrade_storage",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "prepare_avatar",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "fee",
          "Fee"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "79": {
        "TypeFields": [
          {
            "Name": "one",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "three",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "six",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "fee",
          "MintFees"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "80": {
        "Variants": [
          {
            "Name": "First",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Second",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "avatar",
          "LogicGeneration"
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "TypeFields": [
          {
            "Name": "mint",
            "TypeName": "MintConfig<BlockNumber>",
            "TypeId": 82
          },
          {
            "Name": "forge",
            "TypeName": "ForgeConfig",
            "TypeId": 83
          },
          {
            "Name": "transfer",
            "TypeName": "TransferConfig",
            "TypeId": 84
          },
          {
            "Name": "freemint_transfer",
            "TypeName": "FreemintTransferConfig",
            "TypeId": 85
          },
          {
            "Name": "trade",
            "TypeName": "TradeConfig",
            "TypeId": 87
          },
          {
            "Name": "nft_transfer",
            "TypeName": "NftTransferConfig",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "GlobalConfig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "82": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "free_mint_fee_multiplier",
            "TypeName": "MintCount",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "MintConfig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "ForgeConfig"
        ],
        "TypeDef": "Composite"
      },
      "84": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "free_mint_transfer_fee",
            "TypeName": "MintCount",
            "TypeId": 63
          },
          {
            "Name": "min_free_mint_transfer",
            "TypeName": "MintCount",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "TransferConfig"
        ],
        "TypeDef": "Composite"
      },
      "85": {
        "TypeFields": [
          {
            "Name": "mode",
            "TypeName": "FreeMintTransferMode",
            "TypeId": 86
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "FreemintTransferConfig"
        ],
        "TypeDef": "Composite"
      },
      "86": {
        "Variants": [
          {
            "Name": "Open",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WhitelistOnly",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Closed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "FreeMintTransferMode"
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "TradeConfig"
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "NftTransferConfig"
        ],
        "TypeDef": "Composite"
      },
      "89": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "90": {
        "TypeId": 91,
        "TypeDef": "Sequence"
      },
      "91": {
        "TypeIds": [
          12,
          2
        ],
        "TypeDef": "Tuple"
      },
      "92": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "93": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A `collection` was created."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A `collection` was force-created."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "A `collection` was destroyed."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "An `item` was issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An `item` was transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "An `item` was destroyed."
            ]
          },
          {
            "Name": "ItemTransferLocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "An `item` became non-transferable."
            ]
          },
          {
            "Name": "ItemTransferUnlocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "An `item` became transferable."
            ]
          },
          {
            "Name": "ItemPropertiesLocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "lock_metadata",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "lock_attributes",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 8,
            "Docs": [
              "`item` metadata or attributes were locked."
            ]
          },
          {
            "Name": "CollectionLocked",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Some `collection` was locked."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "new_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "admin",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "freezer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 11,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "TransferApproved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deadline",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 39
              }
            ],
            "Index": 12,
            "Docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ]
          },
          {
            "Name": "AllApprovalsCancelled",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "All approvals of an item got cancelled."
            ]
          },
          {
            "Name": "CollectionConfigChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "A `collection` has had its config changed by the `Force` origin."
            ]
          },
          {
            "Name": "CollectionMetadataSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 94
              }
            ],
            "Index": 16,
            "Docs": [
              "New metadata has been set for a `collection`."
            ]
          },
          {
            "Name": "CollectionMetadataCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 17,
            "Docs": [
              "Metadata has been cleared for a `collection`."
            ]
          },
          {
            "Name": "ItemMetadataSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 94
              }
            ],
            "Index": 18,
            "Docs": [
              "New metadata has been set for an item."
            ]
          },
          {
            "Name": "ItemMetadataCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 19,
            "Docs": [
              "Metadata has been cleared for an item."
            ]
          },
          {
            "Name": "Redeposited",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "successful_items",
                "TypeName": "Vec<T::ItemId>",
                "TypeId": 89
              }
            ],
            "Index": 20,
            "Docs": [
              "The deposit for a set of `item`s within a `collection` has been updated."
            ]
          },
          {
            "Name": "AttributeSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 96
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 97
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 98
              }
            ],
            "Index": 21,
            "Docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ]
          },
          {
            "Name": "AttributeCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 96
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 98
              }
            ],
            "Index": 22,
            "Docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ]
          },
          {
            "Name": "ItemAttributesApprovalAdded",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "A new approval to modify item attributes was added."
            ]
          },
          {
            "Name": "ItemAttributesApprovalRemoved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 24,
            "Docs": [
              "A new approval to modify item attributes was removed."
            ]
          },
          {
            "Name": "OwnershipAcceptanceChanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "maybe_collection",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 39
              }
            ],
            "Index": 25,
            "Docs": [
              "Ownership acceptance has changed for an account."
            ]
          },
          {
            "Name": "CollectionMaxSupplySet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "max_supply",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 26,
            "Docs": [
              "Max supply has been set for a collection."
            ]
          },
          {
            "Name": "CollectionMintSettingsUpdated",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 27,
            "Docs": [
              "Mint settings for a collection had changed."
            ]
          },
          {
            "Name": "NextCollectionIdIncremented",
            "TypeFields": [
              {
                "Name": "next_id",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 39
              }
            ],
            "Index": 28,
            "Docs": [
              "Event gets emitted when the `NextCollectionId` gets incremented."
            ]
          },
          {
            "Name": "ItemPriceSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              },
              {
                "Name": "whitelisted_buyer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 29,
            "Docs": [
              "The price was set for the item."
            ]
          },
          {
            "Name": "ItemPriceRemoved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 30,
            "Docs": [
              "The price for the item was removed."
            ]
          },
          {
            "Name": "ItemBought",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              },
              {
                "Name": "seller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 31,
            "Docs": [
              "An item was bought."
            ]
          },
          {
            "Name": "TipSent",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "receiver",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "DepositBalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 32,
            "Docs": [
              "A tip was sent."
            ]
          },
          {
            "Name": "SwapCreated",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "offered_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "desired_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "desired_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 99
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 33,
            "Docs": [
              "An `item` swap intent was created."
            ]
          },
          {
            "Name": "SwapCancelled",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "offered_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "desired_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "desired_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 99
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 34,
            "Docs": [
              "The swap was cancelled."
            ]
          },
          {
            "Name": "SwapClaimed",
            "TypeFields": [
              {
                "Name": "sent_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "sent_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "sent_item_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "received_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "received_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "received_item_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 99
              },
              {
                "Name": "deadline",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 35,
            "Docs": [
              "The swap has been claimed."
            ]
          },
          {
            "Name": "PreSignedAttributesSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 98
              }
            ],
            "Index": 36,
            "Docs": [
              "New attributes have been set for an `item` of the `collection`."
            ]
          },
          {
            "Name": "PalletAttributeSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "attribute",
                "TypeName": "PalletAttributes<T::CollectionId>",
                "TypeId": 102
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 97
              }
            ],
            "Index": 37,
            "Docs": [
              "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
              "within that `collection`."
            ]
          }
        ],
        "Path": [
          "pallet_nfts",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "94": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "95": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "96": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "97": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "98": {
        "Variants": [
          {
            "Name": "Pallet",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CollectionOwner",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ItemOwner",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Account",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "AttributeNamespace"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "99": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 100
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 100
          }
        ],
        "TypeDef": "Variant"
      },
      "100": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Amount",
            "TypeId": 6
          },
          {
            "Name": "direction",
            "TypeName": "PriceDirection",
            "TypeId": 101
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PriceWithDirection"
        ],
        "TypeParams": [
          {
            "Name": "Amount",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "101": {
        "Variants": [
          {
            "Name": "Send",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Receive",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PriceDirection"
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "Variants": [
          {
            "Name": "UsedToClaim",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "TransferDisabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PalletAttributes"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "103": {
        "Variants": [
          {
            "Name": "ItemStored",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Item has been stored as an NFT [collection_id, item_id, owner]"
            ]
          },
          {
            "Name": "ItemRestored",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Item has been restored back from its NFT representation [collection_id, item_id, owner]"
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_nft_transfer",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "104": {
        "Variants": [
          {
            "Name": "CreatorSet",
            "TypeFields": [
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "An creator has been set."
            ]
          },
          {
            "Name": "ContractCollectionSet",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The collection holding the staking contracts has been set."
            ]
          },
          {
            "Name": "SetGlobalConfig",
            "TypeFields": [
              {
                "Name": "new_config",
                "TypeName": "GlobalConfig",
                "TypeId": 105
              }
            ],
            "Index": 2,
            "Docs": [
              "The pallet's global config has been set."
            ]
          },
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A new staking contract has been created."
            ]
          },
          {
            "Name": "Removed",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "A new staking contract has been removed."
            ]
          },
          {
            "Name": "Accepted",
            "TypeFields": [
              {
                "Name": "by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "A staking contract has been accepted."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "rewards",
                "TypeName": "BoundedRewardsOf<T>",
                "TypeId": 106
              }
            ],
            "Index": 6,
            "Docs": [
              "A staking contract has been claimed."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "A staking contract has been cancelled."
            ]
          },
          {
            "Name": "Sniped",
            "TypeFields": [
              {
                "Name": "by",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "rewards",
                "TypeName": "BoundedRewardsOf<T>",
                "TypeId": 106
              }
            ],
            "Index": 8,
            "Docs": [
              "A staking contract has been sniped."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "105": {
        "TypeFields": [
          {
            "Name": "pallet_locked",
            "TypeName": "bool",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "pallet",
          "GlobalConfig"
        ],
        "TypeDef": "Composite"
      },
      "106": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 109
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 107
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "107": {
        "Variants": [
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Nft",
            "TypeFields": [
              {
                "TypeName": "NftId<CollectionId, ItemId>",
                "TypeId": 108
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "Reward"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "108": {
        "TypeFields": [
          {
            "TypeName": "CollectionId",
            "TypeId": 4
          },
          {
            "TypeName": "ItemId",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "NftId"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "109": {
        "TypeId": 107,
        "TypeDef": "Sequence"
      },
      "110": {
        "Variants": [
          {
            "Name": "OrganizerSet",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A new organizer has been set."
            ]
          },
          {
            "Name": "AccountConfigChanged",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "[u8; GameConfig::PARAM_COUNT]",
                "TypeId": 111
              }
            ],
            "Index": 1,
            "Docs": [
              "A account configuration has been changed."
            ]
          },
          {
            "Name": "ForSale",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A price has been set for a mogwai."
            ]
          },
          {
            "Name": "RemovedFromSale",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A price has been unset for a mogwai."
            ]
          },
          {
            "Name": "MogwaiCreated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "A mogwai was created, by the Emperor himself!."
            ]
          },
          {
            "Name": "MogwaiRemoved",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "A mogwai was removed, by the Emperor himself!"
            ]
          },
          {
            "Name": "MogwaiTransfered",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "A mogwai was transfered, by the Emperor himself!"
            ]
          },
          {
            "Name": "MogwaiBought",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A mogwai has been bought."
            ]
          },
          {
            "Name": "MogwaiHatched",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "A mogwai has been hatched."
            ]
          },
          {
            "Name": "MogwaiSacrificed",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "A mogwai has been sacrificed."
            ]
          },
          {
            "Name": "MogwaiSacrificedInto",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 10,
            "Docs": [
              "A mogwai has been sacrificed for an other one."
            ]
          },
          {
            "Name": "MogwaiMorphed",
            "TypeFields": [
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 11,
            "Docs": [
              "A mogwai has been morphed."
            ]
          },
          {
            "Name": "MogwaiBred",
            "TypeFields": [
              {
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 12,
            "Docs": [
              "A mogwai has been bred."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "111": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "112": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "TypeId": 58,
        "TypeDef": "Sequence"
      },
      "114": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 115
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 116
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "115": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "116": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "117": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::remark`]."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_heap_pages`]."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_code`]."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::set_code_without_checks`]."
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 118
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_storage`]."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 120
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::kill_storage`]."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 13
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::kill_prefix`]."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::remark_with_event`]."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "118": {
        "TypeId": 119,
        "TypeDef": "Sequence"
      },
      "119": {
        "TypeIds": [
          13,
          13
        ],
        "TypeDef": "Tuple"
      },
      "120": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "121": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 122
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "122": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 123
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 123
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 123
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 123
          }
        ],
        "TypeDef": "Composite"
      },
      "123": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 124
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 124
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 124
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "124": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Variant"
      },
      "125": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 126
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "126": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "127": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "128": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 116
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 116
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 129
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "129": {
        "TypeFields": [
          {
            "TypeId": 130
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 130
          }
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "TypeId": 131,
        "TypeDef": "Sequence"
      },
      "131": {
        "TypeIds": [
          132,
          4
        ],
        "TypeDef": "Tuple"
      },
      "132": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "133": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "134": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set`]."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "135": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 138
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 136
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "136": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 137
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "137": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "138": {
        "TypeId": 136,
        "TypeDef": "Sequence"
      },
      "139": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "140": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PendingPause",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PendingResume",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredState"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "141": {
        "TypeFields": [
          {
            "Name": "scheduled_at",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "delay",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "next_authorities",
            "TypeName": "BoundedAuthorityList<Limit>",
            "TypeId": 142
          },
          {
            "Name": "forced",
            "TypeName": "Option<N>",
            "TypeId": 39
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredPendingChange"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          },
          {
            "Name": "Limit"
          }
        ],
        "TypeDef": "Composite"
      },
      "142": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 31
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 32
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                "TypeId": 144
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 155
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::report_equivocation`]."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                "TypeId": 144
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 155
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::report_equivocation_unsigned`]."
            ]
          },
          {
            "Name": "note_stalled",
            "TypeFields": [
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "best_finalized_block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::note_stalled`]."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "144": {
        "TypeFields": [
          {
            "Name": "set_id",
            "TypeName": "SetId",
            "TypeId": 11
          },
          {
            "Name": "equivocation",
            "TypeName": "Equivocation<H, N>",
            "TypeId": 145
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "145": {
        "Variants": [
          {
            "Name": "Prevote",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                "TypeId": 146
              }
            ],
            "Index": 0
          },
          {
            "Name": "Precommit",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                "TypeId": 152
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "146": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 33
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 151
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 151
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 33
          },
          {
            "Name": "V",
            "TypeId": 147
          },
          {
            "Name": "S",
            "TypeId": 148
          }
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Prevote"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "148": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Signature",
            "TypeId": 149
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "149": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 150
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "150": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "151": {
        "TypeIds": [
          147,
          148
        ],
        "TypeDef": "Tuple"
      },
      "152": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 33
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 154
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 154
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 33
          },
          {
            "Name": "V",
            "TypeId": 153
          },
          {
            "Name": "S",
            "TypeId": 148
          }
        ],
        "TypeDef": "Composite"
      },
      "153": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Precommit"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "154": {
        "TypeIds": [
          153,
          148
        ],
        "TypeDef": "Tuple"
      },
      "155": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "Variants": [
          {
            "Name": "PauseFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "Name": "ResumeFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "Name": "ChangePending",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "Name": "TooSoon",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "157": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 160
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 158
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "158": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 132
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 159
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "159": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "160": {
        "TypeId": 158,
        "TypeDef": "Sequence"
      },
      "161": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 163
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 162
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 132
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 132
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "163": {
        "TypeId": 162,
        "TypeDef": "Sequence"
      },
      "164": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 166
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 165
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "165": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 47
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 47
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "TypeId": 165,
        "TypeDef": "Sequence"
      },
      "167": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transfer_allow_death`]."
            ]
          },
          {
            "Name": "set_balance_deprecated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 44
              },
              {
                "Name": "old_reserved",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_balance_deprecated`]."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::force_transfer`]."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::transfer_all`]."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::force_unreserve`]."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::upgrade_accounts`]."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::force_set_balance`]."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "168": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 169
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 170
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 47
          }
        ],
        "TypeDef": "Variant"
      },
      "169": {
        "TypeId": 47,
        "TypeDef": "Compact"
      },
      "170": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "171": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "172": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `MaxHolds`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "173": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "175": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "issuer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "admin",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "freezer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "supply",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "min_balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_sufficient",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "accounts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "approvals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "AssetStatus",
            "TypeId": 176
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetDetails"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "176": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetStatus"
        ],
        "TypeDef": "Variant"
      },
      "177": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "178": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "AccountStatus",
            "TypeId": 179
          },
          {
            "Name": "reason",
            "TypeName": "ExistenceReason<DepositBalance, AccountId>",
            "TypeId": 180
          },
          {
            "Name": "extra",
            "TypeName": "Extra",
            "TypeId": 47
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "Extra",
            "TypeId": 47
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "179": {
        "Variants": [
          {
            "Name": "Liquid",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AccountStatus"
        ],
        "TypeDef": "Variant"
      },
      "180": {
        "Variants": [
          {
            "Name": "Consumer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Sufficient",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DepositHeld",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "DepositRefunded",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DepositFrom",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "ExistenceReason"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "181": {
        "TypeIds": [
          4,
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "182": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "183": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "name",
            "TypeName": "BoundedString",
            "TypeId": 184
          },
          {
            "Name": "symbol",
            "TypeName": "BoundedString",
            "TypeId": 184
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "BoundedString",
            "TypeId": 184
          }
        ],
        "TypeDef": "Composite"
      },
      "184": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create`]."
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::force_create`]."
            ]
          },
          {
            "Name": "start_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::start_destroy`]."
            ]
          },
          {
            "Name": "destroy_accounts",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::destroy_accounts`]."
            ]
          },
          {
            "Name": "destroy_approvals",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::destroy_approvals`]."
            ]
          },
          {
            "Name": "finish_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::finish_destroy`]."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::mint`]."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::burn`]."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::force_transfer`]."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::freeze`]."
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::thaw`]."
            ]
          },
          {
            "Name": "freeze_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::freeze_asset`]."
            ]
          },
          {
            "Name": "thaw_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::thaw_asset`]."
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::transfer_ownership`]."
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::set_team`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::clear_metadata`]."
            ]
          },
          {
            "Name": "force_set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 19,
            "Docs": [
              "See [`Pallet::force_set_metadata`]."
            ]
          },
          {
            "Name": "force_clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 20,
            "Docs": [
              "See [`Pallet::force_clear_metadata`]."
            ]
          },
          {
            "Name": "force_asset_status",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 44
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 21,
            "Docs": [
              "See [`Pallet::force_asset_status`]."
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 22,
            "Docs": [
              "See [`Pallet::approve_transfer`]."
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 23,
            "Docs": [
              "See [`Pallet::cancel_approval`]."
            ]
          },
          {
            "Name": "force_cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 24,
            "Docs": [
              "See [`Pallet::force_cancel_approval`]."
            ]
          },
          {
            "Name": "transfer_approved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "destination",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 44
              }
            ],
            "Index": 25,
            "Docs": [
              "See [`Pallet::transfer_approved`]."
            ]
          },
          {
            "Name": "touch",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              }
            ],
            "Index": 26,
            "Docs": [
              "See [`Pallet::touch`]."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "allow_burn",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 27,
            "Docs": [
              "See [`Pallet::refund`]."
            ]
          },
          {
            "Name": "set_min_balance",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 28,
            "Docs": [
              "See [`Pallet::set_min_balance`]."
            ]
          },
          {
            "Name": "touch_other",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 29,
            "Docs": [
              "See [`Pallet::touch_other`]."
            ]
          },
          {
            "Name": "refund_other",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 30,
            "Docs": [
              "See [`Pallet::refund_other`]."
            ]
          },
          {
            "Name": "block",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 115
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 31,
            "Docs": [
              "See [`Pallet::block`]."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "186": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account to alter does not exist."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given asset ID is unknown."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin account is frozen."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The asset ID is already taken."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid witness data given."
            ]
          },
          {
            "Name": "MinBalanceZero",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "Name": "UnavailableConsumer",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
              "fewer then the maximum number of consumers has been reached."
            ]
          },
          {
            "Name": "BadMetadata",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Invalid metadata given."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The asset-account already exists."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "Name": "WouldBurn",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "Name": "LiveAsset",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "Name": "AssetNotLive",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "Name": "IncorrectStatus",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The asset status is not the expected status."
            ]
          },
          {
            "Name": "NotFrozen",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The asset should be frozen before the given operation."
            ]
          },
          {
            "Name": "CallbackFailed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Callback action resulted in error"
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "187": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 188
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 43
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "188": {
        "TypeId": 43,
        "TypeDef": "Sequence"
      },
      "189": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "See [`Pallet::claim`]."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 168
              },
              {
                "Name": "schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 43
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::vested_transfer`]."
            ]
          },
          {
            "Name": "update_vesting_schedules",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 168
              },
              {
                "Name": "vesting_schedules",
                "TypeName": "Vec<VestingScheduleOf<T>>",
                "TypeId": 188
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::update_vesting_schedules`]."
            ]
          },
          {
            "Name": "claim_for",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 168
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::claim_for`]."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "190": {
        "Variants": [
          {
            "Name": "ZeroVestingPeriod",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting period is zero"
            ]
          },
          {
            "Name": "ZeroVestingPeriodCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Number of vests is zero"
            ]
          },
          {
            "Name": "InsufficientBalanceToLock",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient amount of balance to lock"
            ]
          },
          {
            "Name": "TooManyVestingSchedules",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "This account have too many vesting schedules"
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The vested transfer amount is too low"
            ]
          },
          {
            "Name": "MaxVestingSchedulesExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Failed because the maximum vesting schedules was exceeded"
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "191": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "192": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 117
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 134
              }
            ],
            "Index": 1
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                "TypeId": 143
              }
            ],
            "Index": 3
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 167
              }
            ],
            "Index": 4
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                "TypeId": 185
              }
            ],
            "Index": 7
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 189
              }
            ],
            "Index": 8
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 193
              }
            ],
            "Index": 9
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 194
              }
            ],
            "Index": 10
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 195
              }
            ],
            "Index": 11
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 196
              }
            ],
            "Index": 12
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 200
              }
            ],
            "Index": 13
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 201
              }
            ],
            "Index": 14
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 203
              }
            ],
            "Index": 15
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 243
              }
            ],
            "Index": 16
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 245
              }
            ],
            "Index": 17
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 18
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 253
              }
            ],
            "Index": 19
          },
          {
            "Name": "AwesomeAvatars",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AwesomeAvatars, Runtime>",
                "TypeId": 254
              }
            ],
            "Index": 22
          },
          {
            "Name": "Nft",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nft, Runtime>",
                "TypeId": 261
              }
            ],
            "Index": 24
          },
          {
            "Name": "NftStaking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NftStaking, Runtime>",
                "TypeId": 285
              }
            ],
            "Index": 26
          },
          {
            "Name": "BattleMogs",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BattleMogs, Runtime>",
                "TypeId": 306
              }
            ],
            "Index": 27
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "193": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_members`]."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 192
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::execute`]."
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 115
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 192
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::propose`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::disapprove_proposal`]."
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::close`]."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "194": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_members`]."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 192
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::execute`]."
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 115
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 192
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::propose`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::disapprove_proposal`]."
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::close`]."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "195": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 44
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::propose_spend`]."
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::reject_proposal`]."
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::approve_proposal`]."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 44
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::spend`]."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 115
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::remove_approval`]."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "196": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 197
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 44
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::propose`]."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 115
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::second`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 115
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 52
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::emergency_cancel`]."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 197
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::external_propose`]."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 197
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::external_propose_majority`]."
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 197
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::external_propose_default`]."
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "voting_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::fast_track`]."
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::veto_external`]."
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 115
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::cancel_referendum`]."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 199
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::delegate`]."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "See [`Pallet::undelegate`]."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "See [`Pallet::clear_public_proposals`]."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::unlock`]."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::remove_vote`]."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::remove_other_vote`]."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 39
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::blacklist`]."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 115
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::cancel_proposal`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 54
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<PreimageHash>",
                "TypeId": 95
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "197": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 198
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 12
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 192
          }
        ],
        "TypeDef": "Variant"
      },
      "198": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "199": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "200": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::sudo`]."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::sudo_unchecked_weight`]."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_key`]."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::sudo_as`]."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "201": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 202
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::schedule`]."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::cancel`]."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 202
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::schedule_named`]."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_named`]."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 202
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::schedule_after`]."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 202
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::schedule_named_after`]."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "202": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 58
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 58
          }
        ],
        "TypeDef": "Variant"
      },
      "203": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::add_registrar`]."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                "TypeId": 204
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_identity`]."
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 238
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_subs`]."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::clear_identity`]."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 115
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 44
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::request_judgement`]."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::cancel_request`]."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 115
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 44
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::set_fee`]."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 115
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::set_account_id`]."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 115
              },
              {
                "Name": "fields",
                "TypeName": "IdentityFields",
                "TypeId": 240
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_fields`]."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 115
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 242
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::provide_judgement`]."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::kill_identity`]."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 207
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::add_sub`]."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 207
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::rename_sub`]."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::remove_sub`]."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "See [`Pallet::quit_sub`]."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "204": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 205
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 207
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 207
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 207
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 207
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 207
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 237
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 207
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 207
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 236
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 206
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "206": {
        "TypeIds": [
          207,
          207
        ],
        "TypeDef": "Tuple"
      },
      "207": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 208
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 209
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 210
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 211
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 17
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 212
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 213
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 214
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 132
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 215
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 111
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 216
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 217
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 218
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 219
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 220
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 221
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 222
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 223
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 224
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 170
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 225
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 226
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 227
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 228
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 229
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 230
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 231
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 232
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 233
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 234
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 235
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "208": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "209": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "210": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "211": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "212": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "213": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "214": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "215": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "216": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "217": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "218": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "219": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "220": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "221": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "222": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "223": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "224": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "225": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "226": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "227": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "228": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "229": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "230": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "231": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "232": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "233": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "234": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "235": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "236": {
        "TypeId": 206,
        "TypeDef": "Sequence"
      },
      "237": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 170
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 170
          }
        ],
        "TypeDef": "Variant"
      },
      "238": {
        "TypeId": 239,
        "TypeDef": "Sequence"
      },
      "239": {
        "TypeIds": [
          0,
          207
        ],
        "TypeDef": "Tuple"
      },
      "240": {
        "TypeFields": [
          {
            "TypeName": "IdentityField",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 241
          }
        ],
        "TypeDef": "Composite"
      },
      "241": {
        "Variants": [
          {
            "Name": "Display",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Legal",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Web",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Riot",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Email",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "PgpFingerprint",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Image",
            "TypeFields": null,
            "Index": 64
          },
          {
            "Name": "Twitter",
            "TypeFields": null,
            "Index": 128
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityField"
        ],
        "TypeDef": "Variant"
      },
      "242": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "243": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 244
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::proxy`]."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_proxy`]."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_proxy`]."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_proxies`]."
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::create_pure`]."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 62
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 115
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 115
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::kill_pure`]."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::announce`]."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::remove_announcement`]."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::reject_announcement`]."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 244
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::proxy_announced`]."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "244": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 62
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 62
          }
        ],
        "TypeDef": "Variant"
      },
      "245": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::as_multi_threshold_1`]."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 246
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::as_multi`]."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 246
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::approve_as_multi`]."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 171
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 65
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_as_multi`]."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "246": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 65
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 65
          }
        ],
        "TypeDef": "Variant"
      },
      "247": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 248
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::batch`]."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::as_derivative`]."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 248
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::batch_all`]."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 249
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::dispatch_as`]."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 248
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::force_batch`]."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 192
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::with_weight`]."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "248": {
        "TypeId": 192,
        "TypeDef": "Sequence"
      },
      "249": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 250
              }
            ],
            "Index": 0
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 251
              }
            ],
            "Index": 9
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 252
              }
            ],
            "Index": 10
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                "TypeId": 155
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "250": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "251": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "252": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "253": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::note_preimage`]."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::unnote_preimage`]."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::request_preimage`]."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unrequest_preimage`]."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "254": {
        "Variants": [
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "mint_option",
                "TypeName": "MintOption",
                "TypeId": 255
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::mint`]."
            ]
          },
          {
            "Name": "forge",
            "TypeFields": [
              {
                "Name": "leader",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "sacrifices",
                "TypeName": "Vec<AvatarIdOf<T>>",
                "TypeId": 89
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::forge`]."
            ]
          },
          {
            "Name": "transfer_avatar",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::transfer_avatar`]."
            ]
          },
          {
            "Name": "transfer_free_mints",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "how_many",
                "TypeName": "MintCount",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::transfer_free_mints`]."
            ]
          },
          {
            "Name": "set_price",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 44
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_price`]."
            ]
          },
          {
            "Name": "remove_price",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::remove_price`]."
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::buy`]."
            ]
          },
          {
            "Name": "upgrade_storage",
            "TypeFields": [
              {
                "Name": "beneficiary",
                "TypeName": "Option<AccountIdFor<T>>",
                "TypeId": 56
              },
              {
                "Name": "in_season",
                "TypeName": "Option<SeasonId>",
                "TypeId": 259
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::upgrade_storage`]."
            ]
          },
          {
            "Name": "set_organizer",
            "TypeFields": [
              {
                "Name": "organizer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_organizer`]."
            ]
          },
          {
            "Name": "set_treasurer",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              },
              {
                "Name": "treasurer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::set_treasurer`]."
            ]
          },
          {
            "Name": "claim_treasury",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::claim_treasury`]."
            ]
          },
          {
            "Name": "set_season",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonId",
                "TypeId": 63
              },
              {
                "Name": "season",
                "TypeName": "SeasonOf<T>",
                "TypeId": 69
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::set_season`]."
            ]
          },
          {
            "Name": "update_global_config",
            "TypeFields": [
              {
                "Name": "new_global_config",
                "TypeName": "GlobalConfigOf<T>",
                "TypeId": 81
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::update_global_config`]."
            ]
          },
          {
            "Name": "set_free_mints",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "how_many",
                "TypeName": "MintCount",
                "TypeId": 63
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::set_free_mints`]."
            ]
          },
          {
            "Name": "set_collection_id",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "CollectionIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::set_collection_id`]."
            ]
          },
          {
            "Name": "lock_avatar",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::lock_avatar`]."
            ]
          },
          {
            "Name": "unlock_avatar",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::unlock_avatar`]."
            ]
          },
          {
            "Name": "set_service_account",
            "TypeFields": [
              {
                "Name": "service_account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::set_service_account`]."
            ]
          },
          {
            "Name": "prepare_avatar",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::prepare_avatar`]."
            ]
          },
          {
            "Name": "unprepare_avatar",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 19,
            "Docs": [
              "See [`Pallet::unprepare_avatar`]."
            ]
          },
          {
            "Name": "prepare_ipfs",
            "TypeFields": [
              {
                "Name": "avatar_id",
                "TypeName": "AvatarIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "url",
                "TypeName": "IpfsUrl",
                "TypeId": 92
              }
            ],
            "Index": 20,
            "Docs": [
              "See [`Pallet::prepare_ipfs`]."
            ]
          },
          {
            "Name": "modify_freemint_whitelist",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdFor<T>",
                "TypeId": 0
              },
              {
                "Name": "operation",
                "TypeName": "WhitelistOperation",
                "TypeId": 260
              }
            ],
            "Index": 21,
            "Docs": [
              "See [`Pallet::modify_freemint_whitelist`]."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "255": {
        "TypeFields": [
          {
            "Name": "payment",
            "TypeName": "MintPayment",
            "TypeId": 256
          },
          {
            "Name": "pack_type",
            "TypeName": "PackType",
            "TypeId": 257
          },
          {
            "Name": "pack_size",
            "TypeName": "MintPackSize",
            "TypeId": 258
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "MintOption"
        ],
        "TypeDef": "Composite"
      },
      "256": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "MintPayment"
        ],
        "TypeDef": "Variant"
      },
      "257": {
        "Variants": [
          {
            "Name": "Material",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Equipment",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Special",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "PackType"
        ],
        "TypeDef": "Variant"
      },
      "258": {
        "Variants": [
          {
            "Name": "One",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Three",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Six",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "config",
          "MintPackSize"
        ],
        "TypeDef": "Variant"
      },
      "259": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 63
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          }
        ],
        "TypeDef": "Variant"
      },
      "260": {
        "Variants": [
          {
            "Name": "AddAccount",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "RemoveAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ClearList",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "pallet",
          "WhitelistOperation"
        ],
        "TypeDef": "Variant"
      },
      "261": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "config",
                "TypeName": "CollectionConfigFor<T, I>",
                "TypeId": 262
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create`]."
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "config",
                "TypeName": "CollectionConfigFor<T, I>",
                "TypeId": 262
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::force_create`]."
            ]
          },
          {
            "Name": "destroy",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "witness",
                "TypeName": "DestroyWitness",
                "TypeId": 270
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::destroy`]."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "mint_to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "witness_data",
                "TypeName": "Option<MintWitness<T::ItemId, DepositBalanceOf<T, I>>>",
                "TypeId": 271
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::mint`]."
            ]
          },
          {
            "Name": "force_mint",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "mint_to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "item_config",
                "TypeName": "ItemConfig",
                "TypeId": 273
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::force_mint`]."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::burn`]."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "redeposit",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "items",
                "TypeName": "Vec<T::ItemId>",
                "TypeId": 89
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::redeposit`]."
            ]
          },
          {
            "Name": "lock_item_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::lock_item_transfer`]."
            ]
          },
          {
            "Name": "unlock_item_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::unlock_item_transfer`]."
            ]
          },
          {
            "Name": "lock_collection",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "lock_settings",
                "TypeName": "CollectionSettings",
                "TypeId": 263
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::lock_collection`]."
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::transfer_ownership`]."
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 274
              },
              {
                "Name": "admin",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 274
              },
              {
                "Name": "freezer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 274
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::set_team`]."
            ]
          },
          {
            "Name": "force_collection_owner",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::force_collection_owner`]."
            ]
          },
          {
            "Name": "force_collection_config",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "config",
                "TypeName": "CollectionConfigFor<T, I>",
                "TypeId": 262
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::force_collection_config`]."
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "maybe_deadline",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 39
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::approve_transfer`]."
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::cancel_approval`]."
            ]
          },
          {
            "Name": "clear_all_transfer_approvals",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::clear_all_transfer_approvals`]."
            ]
          },
          {
            "Name": "lock_item_properties",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "lock_metadata",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "lock_attributes",
                "TypeName": "bool",
                "TypeId": 41
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::lock_item_properties`]."
            ]
          },
          {
            "Name": "set_attribute",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 98
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 96
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 97
              }
            ],
            "Index": 19,
            "Docs": [
              "See [`Pallet::set_attribute`]."
            ]
          },
          {
            "Name": "force_set_attribute",
            "TypeFields": [
              {
                "Name": "set_as",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              },
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 98
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 96
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 97
              }
            ],
            "Index": 20,
            "Docs": [
              "See [`Pallet::force_set_attribute`]."
            ]
          },
          {
            "Name": "clear_attribute",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "namespace",
                "TypeName": "AttributeNamespace<T::AccountId>",
                "TypeId": 98
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 96
              }
            ],
            "Index": 21,
            "Docs": [
              "See [`Pallet::clear_attribute`]."
            ]
          },
          {
            "Name": "approve_item_attributes",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              }
            ],
            "Index": 22,
            "Docs": [
              "See [`Pallet::approve_item_attributes`]."
            ]
          },
          {
            "Name": "cancel_item_attributes_approval",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 168
              },
              {
                "Name": "witness",
                "TypeName": "CancelAttributesApprovalWitness",
                "TypeId": 275
              }
            ],
            "Index": 23,
            "Docs": [
              "See [`Pallet::cancel_item_attributes_approval`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 94
              }
            ],
            "Index": 24,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 25,
            "Docs": [
              "See [`Pallet::clear_metadata`]."
            ]
          },
          {
            "Name": "set_collection_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 94
              }
            ],
            "Index": 26,
            "Docs": [
              "See [`Pallet::set_collection_metadata`]."
            ]
          },
          {
            "Name": "clear_collection_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 27,
            "Docs": [
              "See [`Pallet::clear_collection_metadata`]."
            ]
          },
          {
            "Name": "set_accept_ownership",
            "TypeFields": [
              {
                "Name": "maybe_collection",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 39
              }
            ],
            "Index": 28,
            "Docs": [
              "See [`Pallet::set_accept_ownership`]."
            ]
          },
          {
            "Name": "set_collection_max_supply",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "max_supply",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 29,
            "Docs": [
              "See [`Pallet::set_collection_max_supply`]."
            ]
          },
          {
            "Name": "update_mint_settings",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "mint_settings",
                "TypeName": "MintSettings<BalanceOf<T, I>, BlockNumberFor<T>, T::CollectionId>",
                "TypeId": 265
              }
            ],
            "Index": 30,
            "Docs": [
              "See [`Pallet::update_mint_settings`]."
            ]
          },
          {
            "Name": "set_price",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "price",
                "TypeName": "Option<ItemPrice<T, I>>",
                "TypeId": 267
              },
              {
                "Name": "whitelisted_buyer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 274
              }
            ],
            "Index": 31,
            "Docs": [
              "See [`Pallet::set_price`]."
            ]
          },
          {
            "Name": "buy_item",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "bid_price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 32,
            "Docs": [
              "See [`Pallet::buy_item`]."
            ]
          },
          {
            "Name": "pay_tips",
            "TypeFields": [
              {
                "Name": "tips",
                "TypeName": "BoundedVec<ItemTipOf<T, I>, T::MaxTips>",
                "TypeId": 276
              }
            ],
            "Index": 33,
            "Docs": [
              "See [`Pallet::pay_tips`]."
            ]
          },
          {
            "Name": "create_swap",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "offered_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "desired_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "maybe_desired_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 95
              },
              {
                "Name": "maybe_price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 99
              },
              {
                "Name": "duration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 34,
            "Docs": [
              "See [`Pallet::create_swap`]."
            ]
          },
          {
            "Name": "cancel_swap",
            "TypeFields": [
              {
                "Name": "offered_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "offered_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 35,
            "Docs": [
              "See [`Pallet::cancel_swap`]."
            ]
          },
          {
            "Name": "claim_swap",
            "TypeFields": [
              {
                "Name": "send_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "send_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "receive_collection",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              },
              {
                "Name": "receive_item",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "witness_price",
                "TypeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                "TypeId": 99
              }
            ],
            "Index": 36,
            "Docs": [
              "See [`Pallet::claim_swap`]."
            ]
          },
          {
            "Name": "mint_pre_signed",
            "TypeFields": [
              {
                "Name": "mint_data",
                "TypeName": "Box<PreSignedMintOf<T, I>>",
                "TypeId": 279
              },
              {
                "Name": "signature",
                "TypeName": "T::OffchainSignature",
                "TypeId": 280
              },
              {
                "Name": "signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 37,
            "Docs": [
              "See [`Pallet::mint_pre_signed`]."
            ]
          },
          {
            "Name": "set_attributes_pre_signed",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "PreSignedAttributesOf<T, I>",
                "TypeId": 284
              },
              {
                "Name": "signature",
                "TypeName": "T::OffchainSignature",
                "TypeId": 280
              },
              {
                "Name": "signer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 38,
            "Docs": [
              "See [`Pallet::set_attributes_pre_signed`]."
            ]
          }
        ],
        "Path": [
          "pallet_nfts",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "262": {
        "TypeFields": [
          {
            "Name": "settings",
            "TypeName": "CollectionSettings",
            "TypeId": 263
          },
          {
            "Name": "max_supply",
            "TypeName": "Option<u32>",
            "TypeId": 39
          },
          {
            "Name": "mint_settings",
            "TypeName": "MintSettings<Price, BlockNumber, CollectionId>",
            "TypeId": 265
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionConfig"
        ],
        "TypeParams": [
          {
            "Name": "Price",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "CollectionId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "263": {
        "TypeFields": [
          {
            "TypeName": "CollectionSetting",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 264
          }
        ],
        "TypeDef": "Composite"
      },
      "264": {
        "Variants": [
          {
            "Name": "TransferableItems",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnlockedMetadata",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UnlockedAttributes",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "UnlockedMaxSupply",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "DepositRequired",
            "TypeFields": null,
            "Index": 16
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionSetting"
        ],
        "TypeDef": "Variant"
      },
      "265": {
        "TypeFields": [
          {
            "Name": "mint_type",
            "TypeName": "MintType<CollectionId>",
            "TypeId": 266
          },
          {
            "Name": "price",
            "TypeName": "Option<Price>",
            "TypeId": 267
          },
          {
            "Name": "start_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 39
          },
          {
            "Name": "end_block",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 39
          },
          {
            "Name": "default_item_settings",
            "TypeName": "ItemSettings",
            "TypeId": 268
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "MintSettings"
        ],
        "TypeParams": [
          {
            "Name": "Price",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "CollectionId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "266": {
        "Variants": [
          {
            "Name": "Issuer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Public",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "HolderOf",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "MintType"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "267": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "268": {
        "TypeFields": [
          {
            "TypeName": "ItemSetting",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 269
          }
        ],
        "TypeDef": "Composite"
      },
      "269": {
        "Variants": [
          {
            "Name": "Transferable",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UnlockedMetadata",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UnlockedAttributes",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemSetting"
        ],
        "TypeDef": "Variant"
      },
      "270": {
        "TypeFields": [
          {
            "Name": "item_metadatas",
            "TypeName": "u32",
            "TypeId": 115
          },
          {
            "Name": "item_configs",
            "TypeName": "u32",
            "TypeId": 115
          },
          {
            "Name": "attributes",
            "TypeName": "u32",
            "TypeId": 115
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "DestroyWitness"
        ],
        "TypeDef": "Composite"
      },
      "271": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 272
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 272
          }
        ],
        "TypeDef": "Variant"
      },
      "272": {
        "TypeFields": [
          {
            "Name": "owned_item",
            "TypeName": "Option<ItemId>",
            "TypeId": 95
          },
          {
            "Name": "mint_price",
            "TypeName": "Option<Balance>",
            "TypeId": 267
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "MintWitness"
        ],
        "TypeParams": [
          {
            "Name": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "273": {
        "TypeFields": [
          {
            "Name": "settings",
            "TypeName": "ItemSettings",
            "TypeId": 268
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemConfig"
        ],
        "TypeDef": "Composite"
      },
      "274": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 168
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 168
          }
        ],
        "TypeDef": "Variant"
      },
      "275": {
        "TypeFields": [
          {
            "Name": "account_attributes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CancelAttributesApprovalWitness"
        ],
        "TypeDef": "Composite"
      },
      "276": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 278
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 277
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "277": {
        "TypeFields": [
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "receiver",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Amount",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemTip"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Amount",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "278": {
        "TypeId": 277,
        "TypeDef": "Sequence"
      },
      "279": {
        "TypeFields": [
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "attributes",
            "TypeName": "Vec<(Vec<u8>, Vec<u8>)>",
            "TypeId": 118
          },
          {
            "Name": "metadata",
            "TypeName": "Vec<u8>",
            "TypeId": 13
          },
          {
            "Name": "only_account",
            "TypeName": "Option<AccountId>",
            "TypeId": 56
          },
          {
            "Name": "deadline",
            "TypeName": "Deadline",
            "TypeId": 4
          },
          {
            "Name": "mint_price",
            "TypeName": "Option<Balance>",
            "TypeId": 267
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PreSignedMint"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Deadline",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "280": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 149
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 281
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 282
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "281": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 150
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "282": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 283
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "283": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "284": {
        "TypeFields": [
          {
            "Name": "collection",
            "TypeName": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "item",
            "TypeName": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "attributes",
            "TypeName": "Vec<(Vec<u8>, Vec<u8>)>",
            "TypeId": 118
          },
          {
            "Name": "namespace",
            "TypeName": "AttributeNamespace<AccountId>",
            "TypeId": 98
          },
          {
            "Name": "deadline",
            "TypeName": "Deadline",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PreSignedAttributes"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Deadline",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "285": {
        "Variants": [
          {
            "Name": "set_creator",
            "TypeFields": [
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_creator`]."
            ]
          },
          {
            "Name": "set_contract_collection_id",
            "TypeFields": [
              {
                "Name": "collection_id",
                "TypeName": "T::CollectionId",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_contract_collection_id`]."
            ]
          },
          {
            "Name": "set_global_config",
            "TypeFields": [
              {
                "Name": "new_config",
                "TypeName": "GlobalConfig",
                "TypeId": 105
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_global_config`]."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "contract",
                "TypeName": "ContractOf<T>",
                "TypeId": 286
              },
              {
                "Name": "metadata",
                "TypeName": "Option<Str>",
                "TypeId": 300
              },
              {
                "Name": "contract_attrs",
                "TypeName": "Option<BoundedVec<(Str, Str), ConstU32<10>>>",
                "TypeId": 301
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::create`]."
            ]
          },
          {
            "Name": "remove",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::remove`]."
            ]
          },
          {
            "Name": "accept",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "stakes",
                "TypeName": "Vec<NftIdOf<T>>",
                "TypeId": 305
              },
              {
                "Name": "fees",
                "TypeName": "Vec<NftIdOf<T>>",
                "TypeId": 305
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::accept`]."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::cancel`]."
            ]
          },
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              },
              {
                "Name": "reward_beneficiary",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 56
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::claim`]."
            ]
          },
          {
            "Name": "snipe",
            "TypeFields": [
              {
                "Name": "contract_id",
                "TypeName": "T::ItemId",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::snipe`]."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "286": {
        "TypeFields": [
          {
            "Name": "activation",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 39
          },
          {
            "Name": "active_duration",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "claim_duration",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "stake_duration",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "stake_clauses",
            "TypeName": "BoundedClauses<CollectionId, KL, VL>",
            "TypeId": 289
          },
          {
            "Name": "fee_clauses",
            "TypeName": "BoundedClauses<CollectionId, KL, VL>",
            "TypeId": 289
          },
          {
            "Name": "burn_fees",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "rewards",
            "TypeName": "BoundedRewards<Balance, CollectionId, ItemId>",
            "TypeId": 106
          },
          {
            "Name": "cancel_fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nft_stake_amount",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "nft_fee_amount",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "is_snipeable",
            "TypeName": "bool",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "Contract"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "KL",
            "TypeId": 287
          },
          {
            "Name": "VL",
            "TypeId": 288
          }
        ],
        "TypeDef": "Composite"
      },
      "287": {
        "Path": [
          "ajuna_solo_runtime",
          "ParameterGet"
        ],
        "TypeDef": "Composite"
      },
      "288": {
        "Path": [
          "ajuna_solo_runtime",
          "ParameterGet"
        ],
        "TypeDef": "Composite"
      },
      "289": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 299
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 290
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "290": {
        "TypeFields": [
          {
            "Name": "namespace",
            "TypeName": "AttributeNamespace",
            "TypeId": 291
          },
          {
            "Name": "target_index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "clause",
            "TypeName": "Clause<CollectionId, KL, VL>",
            "TypeId": 292
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "ContractClause"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "KL",
            "TypeId": 287
          },
          {
            "Name": "VL",
            "TypeId": 288
          }
        ],
        "TypeDef": "Composite"
      },
      "291": {
        "Variants": [
          {
            "Name": "Pallet",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CollectionOwner",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "AttributeNamespace"
        ],
        "TypeDef": "Variant"
      },
      "292": {
        "Variants": [
          {
            "Name": "HasAttribute",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              },
              {
                "TypeName": "Attribute<KL>",
                "TypeId": 96
              }
            ],
            "Index": 0
          },
          {
            "Name": "HasAllAttributes",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              },
              {
                "TypeName": "BoundedVec<Attribute<KL>, ConstU32<10>>",
                "TypeId": 293
              }
            ],
            "Index": 1
          },
          {
            "Name": "HasAnyAttributes",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              },
              {
                "TypeName": "BoundedVec<Attribute<KL>, ConstU32<10>>",
                "TypeId": 293
              }
            ],
            "Index": 2
          },
          {
            "Name": "HasAttributeWithValue",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              },
              {
                "TypeName": "Attribute<KL>",
                "TypeId": 96
              },
              {
                "TypeName": "AttributeValue<VL>",
                "TypeId": 295
              }
            ],
            "Index": 3
          },
          {
            "Name": "HasAllAttributesWithValues",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              },
              {
                "TypeName": "BoundedVec<(Attribute<KL>, AttributeValue<VL>), ConstU32<10>>",
                "TypeId": 296
              }
            ],
            "Index": 4
          },
          {
            "Name": "HasAnyAttributesWithValues",
            "TypeFields": [
              {
                "TypeName": "CollectionId",
                "TypeId": 4
              },
              {
                "TypeName": "BoundedVec<(Attribute<KL>, AttributeValue<VL>), ConstU32<10>>",
                "TypeId": 296
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "Clause"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "KL",
            "TypeId": 287
          },
          {
            "Name": "VL",
            "TypeId": 288
          }
        ],
        "TypeDef": "Variant"
      },
      "293": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 294
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 96
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "294": {
        "TypeId": 96,
        "TypeDef": "Sequence"
      },
      "295": {
        "Variants": [
          {
            "Name": "Equal",
            "TypeFields": [
              {
                "TypeName": "Attribute<VL>",
                "TypeId": 97
              }
            ],
            "Index": 0
          },
          {
            "Name": "Greater",
            "TypeFields": [
              {
                "TypeName": "Attribute<VL>",
                "TypeId": 97
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lower",
            "TypeFields": [
              {
                "TypeName": "Attribute<VL>",
                "TypeId": 97
              }
            ],
            "Index": 2
          },
          {
            "Name": "GreaterOrEqual",
            "TypeFields": [
              {
                "TypeName": "Attribute<VL>",
                "TypeId": 97
              }
            ],
            "Index": 3
          },
          {
            "Name": "LowerOrEqual",
            "TypeFields": [
              {
                "TypeName": "Attribute<VL>",
                "TypeId": 97
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "AttributeValue"
        ],
        "TypeParams": [
          {
            "Name": "VL",
            "TypeId": 288
          }
        ],
        "TypeDef": "Variant"
      },
      "296": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 298
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 297
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "297": {
        "TypeIds": [
          96,
          295
        ],
        "TypeDef": "Tuple"
      },
      "298": {
        "TypeId": 297,
        "TypeDef": "Sequence"
      },
      "299": {
        "TypeId": 290,
        "TypeDef": "Sequence"
      },
      "300": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 116
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 116
          }
        ],
        "TypeDef": "Variant"
      },
      "301": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 302
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 302
          }
        ],
        "TypeDef": "Variant"
      },
      "302": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 304
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 303
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "303": {
        "TypeIds": [
          116,
          116
        ],
        "TypeDef": "Tuple"
      },
      "304": {
        "TypeId": 303,
        "TypeDef": "Sequence"
      },
      "305": {
        "TypeId": 108,
        "TypeDef": "Sequence"
      },
      "306": {
        "Variants": [
          {
            "Name": "set_organizer",
            "TypeFields": [
              {
                "Name": "organizer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_organizer`]."
            ]
          },
          {
            "Name": "update_config",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "value_opt",
                "TypeName": "Option<u8>",
                "TypeId": 307
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::update_config`]."
            ]
          },
          {
            "Name": "set_price",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "new_price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_price`]."
            ]
          },
          {
            "Name": "remove_price",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_price`]."
            ]
          },
          {
            "Name": "create_mogwai",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "See [`Pallet::create_mogwai`]."
            ]
          },
          {
            "Name": "remove_mogwai",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::remove_mogwai`]."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "hatch_mogwai",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::hatch_mogwai`]."
            ]
          },
          {
            "Name": "sacrifice",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::sacrifice`]."
            ]
          },
          {
            "Name": "sacrifice_into",
            "TypeFields": [
              {
                "Name": "mogwai_id_1",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "mogwai_id_2",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::sacrifice_into`]."
            ]
          },
          {
            "Name": "buy_mogwai",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              },
              {
                "Name": "max_price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::buy_mogwai`]."
            ]
          },
          {
            "Name": "morph_mogwai",
            "TypeFields": [
              {
                "Name": "mogwai_id",
                "TypeName": "MogwaiIdOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::morph_mogwai`]."
            ]
          },
          {
            "Name": "breed_mogwai",
            "TypeFields": [
              {
                "Name": "mogwai_id_1",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "mogwai_id_2",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::breed_mogwai`]."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "307": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          }
        ],
        "TypeDef": "Variant"
      },
      "308": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 4
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 171
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 171
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "309": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "310": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "311": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "312": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "313": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 132
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "314": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "315": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 317
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 316
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "TypeIds": [
          4,
          197,
          0
        ],
        "TypeDef": "Tuple"
      },
      "317": {
        "TypeId": 316,
        "TypeDef": "Sequence"
      },
      "318": {
        "TypeIds": [
          319,
          6
        ],
        "TypeDef": "Tuple"
      },
      "319": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 171
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 321
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 41
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 197
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "321": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 197
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 51
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 322
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 197
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "322": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "323": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 324
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 327
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 328
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 199
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 327
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 328
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "324": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 326
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 325
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "325": {
        "TypeIds": [
          4,
          52
        ],
        "TypeDef": "Tuple"
      },
      "326": {
        "TypeId": 325,
        "TypeDef": "Sequence"
      },
      "327": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "328": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "329": {
        "TypeIds": [
          197,
          51
        ],
        "TypeDef": "Tuple"
      },
      "330": {
        "TypeIds": [
          4,
          319
        ],
        "TypeDef": "Tuple"
      },
      "331": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "332": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet"
        ]
      },
      "333": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 336
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 334
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "334": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 335
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 335
          }
        ],
        "TypeDef": "Variant"
      },
      "335": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 59
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 197
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 202
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 249
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 197
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 249
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "336": {
        "TypeId": 334,
        "TypeDef": "Sequence"
      },
      "337": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "338": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 339
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo<MaxAdditionalFields>",
            "TypeId": 204
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "MaxAdditionalFields"
          }
        ],
        "TypeDef": "Composite"
      },
      "339": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 341
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 340
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "340": {
        "TypeIds": [
          4,
          242
        ],
        "TypeDef": "Tuple"
      },
      "341": {
        "TypeId": 340,
        "TypeDef": "Sequence"
      },
      "342": {
        "TypeIds": [
          6,
          343
        ],
        "TypeDef": "Tuple"
      },
      "343": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 171
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "344": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 347
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 345
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "345": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 346
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 346
          }
        ],
        "TypeDef": "Variant"
      },
      "346": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdentityFields",
            "TypeId": 240
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "347": {
        "TypeId": 345,
        "TypeDef": "Sequence"
      },
      "348": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyFields",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Too many additional fields."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "349": {
        "TypeIds": [
          350,
          6
        ],
        "TypeDef": "Tuple"
      },
      "350": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 352
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 351
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "351": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 62
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 62
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "352": {
        "TypeId": 351,
        "TypeDef": "Sequence"
      },
      "353": {
        "TypeIds": [
          354,
          6
        ],
        "TypeDef": "Tuple"
      },
      "354": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 356
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 355
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "355": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 12
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "356": {
        "TypeId": 355,
        "TypeDef": "Sequence"
      },
      "357": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "358": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "359": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 65
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 360
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 171
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "362": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "363": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 364
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 365
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 39
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "364": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "365": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 364
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 364
          }
        ],
        "TypeDef": "Variant"
      },
      "366": {
        "TypeIds": [
          12,
          4
        ],
        "TypeDef": "Tuple"
      },
      "367": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "368": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "369": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 171
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "370": {
        "TypeFields": [
          {
            "Name": "season_id",
            "TypeName": "SeasonId",
            "TypeId": 63
          },
          {
            "Name": "early",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "active",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "early_ended",
            "TypeName": "bool",
            "TypeId": 41
          },
          {
            "Name": "max_tier_avatars",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "season",
          "SeasonStatus"
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeIds": [
          0,
          372
        ],
        "TypeDef": "Tuple"
      },
      "372": {
        "TypeFields": [
          {
            "Name": "season_id",
            "TypeName": "SeasonId",
            "TypeId": 63
          },
          {
            "Name": "encoding",
            "TypeName": "DnaEncoding",
            "TypeId": 373
          },
          {
            "Name": "dna",
            "TypeName": "Dna",
            "TypeId": 70
          },
          {
            "Name": "souls",
            "TypeName": "SoulCount",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "avatar",
          "Avatar"
        ],
        "TypeDef": "Composite"
      },
      "373": {
        "Variants": [
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "avatar",
          "DnaEncoding"
        ],
        "TypeDef": "Variant"
      },
      "374": {
        "TypeIds": [
          0,
          63
        ],
        "TypeDef": "Tuple"
      },
      "375": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "376": {
        "TypeFields": [
          {
            "Name": "free_mints",
            "TypeName": "MintCount",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "PlayerConfig"
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "TypeFields": [
          {
            "Name": "storage_tier",
            "TypeName": "StorageTier",
            "TypeId": 378
          },
          {
            "Name": "stats",
            "TypeName": "Stats<BlockNumber>",
            "TypeId": 379
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "PlayerSeasonConfig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "Variants": [
          {
            "Name": "One",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "Two",
            "TypeFields": null,
            "Index": 50
          },
          {
            "Name": "Three",
            "TypeFields": null,
            "Index": 75
          },
          {
            "Name": "Four",
            "TypeFields": null,
            "Index": 100
          },
          {
            "Name": "Five",
            "TypeFields": null,
            "Index": 150
          },
          {
            "Name": "Max",
            "TypeFields": null,
            "Index": 200
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "StorageTier"
        ],
        "TypeDef": "Variant"
      },
      "379": {
        "TypeFields": [
          {
            "Name": "mint",
            "TypeName": "PlayStats<BlockNumber>",
            "TypeId": 380
          },
          {
            "Name": "forge",
            "TypeName": "PlayStats<BlockNumber>",
            "TypeId": 380
          },
          {
            "Name": "trade",
            "TypeName": "TradeStats",
            "TypeId": 384
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "Stats"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "380": {
        "TypeFields": [
          {
            "Name": "first",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "last",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "seasons_participated",
            "TypeName": "BoundedBTreeSet<SeasonId, MaxSeasons>",
            "TypeId": 381
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "PlayStats"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "381": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 382
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "382": {
        "TypeFields": [
          {
            "TypeId": 383
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          }
        ],
        "TypeDef": "Composite"
      },
      "383": {
        "TypeId": 63,
        "TypeDef": "Sequence"
      },
      "384": {
        "TypeFields": [
          {
            "Name": "bought",
            "TypeName": "Stat",
            "TypeId": 4
          },
          {
            "Name": "sold",
            "TypeName": "Stat",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "TradeStats"
        ],
        "TypeDef": "Composite"
      },
      "385": {
        "TypeIds": [
          63,
          0
        ],
        "TypeDef": "Tuple"
      },
      "386": {
        "TypeFields": [
          {
            "Name": "minted",
            "TypeName": "Stat",
            "TypeId": 4
          },
          {
            "Name": "forged",
            "TypeName": "Stat",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "types",
          "account",
          "SeasonInfo"
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "TypeIds": [
          63,
          12
        ],
        "TypeDef": "Tuple"
      },
      "388": {
        "Variants": [
          {
            "Name": "OrganizerNotSet",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There is no account set as the organizer"
            ]
          },
          {
            "Name": "CollectionIdNotSet",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There is no collection ID set for NFT handler."
            ]
          },
          {
            "Name": "EarlyStartTooEarly",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The season starts before the previous season has ended."
            ]
          },
          {
            "Name": "EarlyStartTooLate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The season season start later than its early access"
            ]
          },
          {
            "Name": "SeasonStartTooLate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The season start date is newer than its end date."
            ]
          },
          {
            "Name": "SeasonEndTooLate",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The season ends after the new season has started."
            ]
          },
          {
            "Name": "PeriodConfigOverflow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The season's per period and periods configuration overflows."
            ]
          },
          {
            "Name": "PeriodsIndivisible",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The season's periods configuration is indivisible by max variation."
            ]
          },
          {
            "Name": "UnknownSeason",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The season doesn't exist."
            ]
          },
          {
            "Name": "UnknownAvatar",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The avatar doesn't exist."
            ]
          },
          {
            "Name": "UnknownAvatarForSale",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The avatar for sale doesn't exist."
            ]
          },
          {
            "Name": "UnknownTier",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The tier doesn't exist."
            ]
          },
          {
            "Name": "UnknownTreasurer",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The treasurer doesn't exist."
            ]
          },
          {
            "Name": "UnknownPreparation",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The preparation doesn't exist."
            ]
          },
          {
            "Name": "NonSequentialSeasonId",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The season ID of a season to create is not sequential."
            ]
          },
          {
            "Name": "SingleMintProbsOverflow",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The sum of the given single mint probabilities overflows."
            ]
          },
          {
            "Name": "BatchMintProbsOverflow",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The sum of the given batch mint probabilities overflows."
            ]
          },
          {
            "Name": "IncorrectRarityPercentages",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Rarity percentages don't add up to 100"
            ]
          },
          {
            "Name": "TooManyRarityPercentages",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Max tier is achievable through forging only. Therefore the number of rarity percentages",
              "must be less than that of tiers for a season."
            ]
          },
          {
            "Name": "BaseProbTooHigh",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The given base probability is too high. It must be less than 100."
            ]
          },
          {
            "Name": "DuplicatedRarityTier",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Some rarity tier are duplicated."
            ]
          },
          {
            "Name": "MintClosed",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Minting is not available at the moment."
            ]
          },
          {
            "Name": "ForgeClosed",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Forging is not available at the moment."
            ]
          },
          {
            "Name": "TransferClosed",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Transfer is not available at the moment."
            ]
          },
          {
            "Name": "TradeClosed",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Trading is not available at the moment."
            ]
          },
          {
            "Name": "NftTransferClosed",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "NFT transfer is not available at the moment."
            ]
          },
          {
            "Name": "FreeMintTransferClosed",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Free mint transfer is not available at the moment."
            ]
          },
          {
            "Name": "SeasonClosed",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Attempt to mint or forge outside of an active season."
            ]
          },
          {
            "Name": "PrematureSeasonEnd",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Attempt to mint when the season has ended prematurely."
            ]
          },
          {
            "Name": "MaxOwnershipReached",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Max ownership reached."
            ]
          },
          {
            "Name": "MaxStorageTierReached",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Max storage tier reached."
            ]
          },
          {
            "Name": "Ownership",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Avatar belongs to someone else."
            ]
          },
          {
            "Name": "AlreadyOwned",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Attempt to buy his or her own avatar."
            ]
          },
          {
            "Name": "IncorrectDna",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "Incorrect DNA."
            ]
          },
          {
            "Name": "IncorrectData",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "Incorrect data."
            ]
          },
          {
            "Name": "IncorrectAvatarId",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "Incorrect Avatar ID."
            ]
          },
          {
            "Name": "IncorrectSeasonId",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "Incorrect season ID."
            ]
          },
          {
            "Name": "MintCooldown",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "The player must wait cooldown period."
            ]
          },
          {
            "Name": "MaxComponentsTooLow",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "The season's max components value is less than the minimum allowed (1)."
            ]
          },
          {
            "Name": "MaxComponentsTooHigh",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "The season's max components value is more than the maximum allowed (random byte: 32)."
            ]
          },
          {
            "Name": "MaxVariationsTooLow",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "The season's max variations value is less than the minimum allowed (1)."
            ]
          },
          {
            "Name": "MaxVariationsTooHigh",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "The season's max variations value is more than the maximum allowed (15)."
            ]
          },
          {
            "Name": "InsufficientFreeMints",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "The player has not enough free mints available."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "The player has not enough balance available."
            ]
          },
          {
            "Name": "TooLowFreeMints",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "Attempt to transfer, issue or withdraw free mints lower than the minimum allowed."
            ]
          },
          {
            "Name": "TooFewSacrifices",
            "TypeFields": null,
            "Index": 45,
            "Docs": [
              "Less than minimum allowed sacrifices are used for forging."
            ]
          },
          {
            "Name": "TooManySacrifices",
            "TypeFields": null,
            "Index": 46,
            "Docs": [
              "More than maximum allowed sacrifices are used for forging."
            ]
          },
          {
            "Name": "LeaderSacrificed",
            "TypeFields": null,
            "Index": 47,
            "Docs": [
              "Leader is being sacrificed."
            ]
          },
          {
            "Name": "AvatarCannotBeTraded",
            "TypeFields": null,
            "Index": 48,
            "Docs": [
              "This avatar cannot be used in trades."
            ]
          },
          {
            "Name": "AvatarInTrade",
            "TypeFields": null,
            "Index": 49,
            "Docs": [
              "An avatar listed for trade is used to forge."
            ]
          },
          {
            "Name": "AvatarLocked",
            "TypeFields": null,
            "Index": 50,
            "Docs": [
              "The avatar is currently locked and cannot be used."
            ]
          },
          {
            "Name": "AvatarUnlocked",
            "TypeFields": null,
            "Index": 51,
            "Docs": [
              "The avatar is currently unlocked and cannot be locked again."
            ]
          },
          {
            "Name": "IncorrectAvatarSeason",
            "TypeFields": null,
            "Index": 52,
            "Docs": [
              "Tried to forge avatars from different seasons."
            ]
          },
          {
            "Name": "IncompatibleAvatarVersions",
            "TypeFields": null,
            "Index": 53,
            "Docs": [
              "Tried to forge avatars with different DNA versions."
            ]
          },
          {
            "Name": "InsufficientStorageForForging",
            "TypeFields": null,
            "Index": 54,
            "Docs": [
              "There's not enough space to hold the forging results"
            ]
          },
          {
            "Name": "CannotTransferToSelf",
            "TypeFields": null,
            "Index": 55,
            "Docs": [
              "Tried transferring to his or her own account."
            ]
          },
          {
            "Name": "CannotTransferFromInactiveAccount",
            "TypeFields": null,
            "Index": 56,
            "Docs": [
              "Tried transferring while the account still hasn't minted and forged anything."
            ]
          },
          {
            "Name": "CannotClaimDuringSeason",
            "TypeFields": null,
            "Index": 57,
            "Docs": [
              "Tried claiming treasury during a season."
            ]
          },
          {
            "Name": "CannotClaimZero",
            "TypeFields": null,
            "Index": 58,
            "Docs": [
              "Tried claiming treasury which is zero."
            ]
          },
          {
            "Name": "IncompatibleMintComponents",
            "TypeFields": null,
            "Index": 59,
            "Docs": [
              "The components tried to mint were not compatible."
            ]
          },
          {
            "Name": "IncompatibleForgeComponents",
            "TypeFields": null,
            "Index": 60,
            "Docs": [
              "The components tried to forge were not compatible."
            ]
          },
          {
            "Name": "InsufficientSacrifices",
            "TypeFields": null,
            "Index": 61,
            "Docs": [
              "The amount of sacrifices is not sufficient for forging."
            ]
          },
          {
            "Name": "ExcessiveSacrifices",
            "TypeFields": null,
            "Index": 62,
            "Docs": [
              "The amount of sacrifices is too much for forging."
            ]
          },
          {
            "Name": "AlreadyPrepared",
            "TypeFields": null,
            "Index": 63,
            "Docs": [
              "Tried to prepare an already prepared avatar."
            ]
          },
          {
            "Name": "NotPrepared",
            "TypeFields": null,
            "Index": 64,
            "Docs": [
              "Tried to prepare an IPFS URL for an avatar, that is not yet prepared."
            ]
          },
          {
            "Name": "NoServiceAccount",
            "TypeFields": null,
            "Index": 65,
            "Docs": [
              "No service account has been set."
            ]
          },
          {
            "Name": "EmptyIpfsUrl",
            "TypeFields": null,
            "Index": 66,
            "Docs": [
              "Tried to prepare an IPFS URL for an avatar with an empty URL."
            ]
          },
          {
            "Name": "AccountAlreadyInWhitelist",
            "TypeFields": null,
            "Index": 67,
            "Docs": [
              "The account trying to be whitelisted is already in the whitelist"
            ]
          },
          {
            "Name": "WhitelistedAccountsLimitReached",
            "TypeFields": null,
            "Index": 68,
            "Docs": [
              "Cannot add more accounts to the whitelist."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_awesome_avatars",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "389": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "390": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "owner_deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "items",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "item_metadatas",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "item_configs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "attributes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionDetails"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "TypeIds": [
          0,
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "392": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "393": {
        "TypeFields": [
          {
            "TypeName": "CollectionRole",
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 394
          }
        ],
        "TypeDef": "Composite"
      },
      "394": {
        "Variants": [
          {
            "Name": "Issuer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Freezer",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Admin",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionRole"
        ],
        "TypeDef": "Variant"
      },
      "395": {
        "TypeIds": [
          4,
          12
        ],
        "TypeDef": "Tuple"
      },
      "396": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "Approvals",
            "TypeId": 398
          },
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 397
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemDetails"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Deposit",
            "TypeId": 397
          },
          {
            "Name": "Approvals",
            "TypeId": 398
          }
        ],
        "TypeDef": "Composite"
      },
      "397": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemDeposit"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "398": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 399
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 39
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "399": {
        "TypeFields": [
          {
            "TypeId": 400
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 39
          }
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "TypeId": 401,
        "TypeDef": "Sequence"
      },
      "401": {
        "TypeIds": [
          0,
          39
        ],
        "TypeDef": "Tuple"
      },
      "402": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 6
          },
          {
            "Name": "data",
            "TypeName": "BoundedVec<u8, StringLimit>",
            "TypeId": 94
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "CollectionMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Deposit",
            "TypeId": 6
          },
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "403": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "Deposit",
            "TypeId": 404
          },
          {
            "Name": "data",
            "TypeName": "BoundedVec<u8, StringLimit>",
            "TypeId": 94
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Deposit",
            "TypeId": 404
          },
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "404": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "Option<AccountId>",
            "TypeId": 56
          },
          {
            "Name": "amount",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "ItemMetadataDeposit"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "405": {
        "TypeIds": [
          4,
          95,
          98,
          96
        ],
        "TypeDef": "Tuple"
      },
      "406": {
        "TypeIds": [
          97,
          407
        ],
        "TypeDef": "Tuple"
      },
      "407": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "Option<AccountId>",
            "TypeId": 56
          },
          {
            "Name": "amount",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "AttributeDeposit"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "408": {
        "TypeIds": [
          6,
          56
        ],
        "TypeDef": "Tuple"
      },
      "409": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 410
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "TypeFields": [
          {
            "TypeId": 171
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "411": {
        "TypeFields": [
          {
            "Name": "desired_collection",
            "TypeName": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "desired_item",
            "TypeName": "Option<ItemId>",
            "TypeId": 95
          },
          {
            "Name": "price",
            "TypeName": "Option<ItemPriceWithDirection>",
            "TypeId": 99
          },
          {
            "Name": "deadline",
            "TypeName": "Deadline",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PendingSwap"
        ],
        "TypeParams": [
          {
            "Name": "CollectionId",
            "TypeId": 4
          },
          {
            "Name": "ItemId",
            "TypeId": 12
          },
          {
            "Name": "ItemPriceWithDirection",
            "TypeId": 100
          },
          {
            "Name": "Deadline",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "412": {
        "TypeFields": [
          {
            "TypeName": "PalletFeature",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 413
          }
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "Variants": [
          {
            "Name": "Trading",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Attributes",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Approvals",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Swaps",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "pallet_nfts",
          "types",
          "PalletFeature"
        ],
        "TypeDef": "Variant"
      },
      "414": {
        "Variants": [
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "UnknownCollection",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given item ID is unknown."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "Name": "ApprovalExpired",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The approval had a deadline that expired, so the approval isn't valid anymore."
            ]
          },
          {
            "Name": "WrongOwner",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The witness data given does not match the current state of the chain."
            ]
          },
          {
            "Name": "CollectionIdInUse",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Collection ID is already taken."
            ]
          },
          {
            "Name": "ItemsNonTransferable",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Items within that collection are non-transferable."
            ]
          },
          {
            "Name": "NotDelegate",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The provided account is not a delegate."
            ]
          },
          {
            "Name": "WrongDelegate",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "Unaccepted",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The named owner has not signed ownership acceptance of the collection."
            ]
          },
          {
            "Name": "ItemLocked",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The item is locked (non-transferable)."
            ]
          },
          {
            "Name": "LockedItemAttributes",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Item's attributes are locked."
            ]
          },
          {
            "Name": "LockedCollectionAttributes",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Collection's attributes are locked."
            ]
          },
          {
            "Name": "LockedItemMetadata",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Item's metadata is locked."
            ]
          },
          {
            "Name": "LockedCollectionMetadata",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Collection's metadata is locked."
            ]
          },
          {
            "Name": "MaxSupplyReached",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "All items have been minted."
            ]
          },
          {
            "Name": "MaxSupplyLocked",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The max supply is locked and can't be changed."
            ]
          },
          {
            "Name": "MaxSupplyTooSmall",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The provided max supply is less than the number of items a collection already has."
            ]
          },
          {
            "Name": "UnknownItem",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The given item ID is unknown."
            ]
          },
          {
            "Name": "UnknownSwap",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Swap doesn't exist."
            ]
          },
          {
            "Name": "MetadataNotFound",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The given item has no metadata set."
            ]
          },
          {
            "Name": "AttributeNotFound",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The provided attribute can't be found."
            ]
          },
          {
            "Name": "NotForSale",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Item is not for sale."
            ]
          },
          {
            "Name": "BidTooLow",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The provided bid is too low."
            ]
          },
          {
            "Name": "ReachedApprovalLimit",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "The item has reached its approval limit."
            ]
          },
          {
            "Name": "DeadlineExpired",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The deadline has already expired."
            ]
          },
          {
            "Name": "WrongDuration",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "The duration provided should be less than or equal to `MaxDeadlineDuration`."
            ]
          },
          {
            "Name": "MethodDisabled",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "The method is disabled by system settings."
            ]
          },
          {
            "Name": "WrongSetting",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "The provided setting can't be set."
            ]
          },
          {
            "Name": "InconsistentItemConfig",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "Item's config already exists and should be equal to the provided one."
            ]
          },
          {
            "Name": "NoConfig",
            "TypeFields": null,
            "Index": 32,
            "Docs": [
              "Config for a collection or an item can't be found."
            ]
          },
          {
            "Name": "RolesNotCleared",
            "TypeFields": null,
            "Index": 33,
            "Docs": [
              "Some roles were not cleared."
            ]
          },
          {
            "Name": "MintNotStarted",
            "TypeFields": null,
            "Index": 34,
            "Docs": [
              "Mint has not started yet."
            ]
          },
          {
            "Name": "MintEnded",
            "TypeFields": null,
            "Index": 35,
            "Docs": [
              "Mint has already ended."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 36,
            "Docs": [
              "The provided Item was already used for claiming."
            ]
          },
          {
            "Name": "IncorrectData",
            "TypeFields": null,
            "Index": 37,
            "Docs": [
              "The provided data is incorrect."
            ]
          },
          {
            "Name": "WrongOrigin",
            "TypeFields": null,
            "Index": 38,
            "Docs": [
              "The extrinsic was sent by the wrong origin."
            ]
          },
          {
            "Name": "WrongSignature",
            "TypeFields": null,
            "Index": 39,
            "Docs": [
              "The provided signature is incorrect."
            ]
          },
          {
            "Name": "IncorrectMetadata",
            "TypeFields": null,
            "Index": 40,
            "Docs": [
              "The provided metadata might be too long."
            ]
          },
          {
            "Name": "MaxAttributesLimitReached",
            "TypeFields": null,
            "Index": 41,
            "Docs": [
              "Can't set more attributes per one call."
            ]
          },
          {
            "Name": "WrongNamespace",
            "TypeFields": null,
            "Index": 42,
            "Docs": [
              "The provided namespace isn't supported in this call."
            ]
          },
          {
            "Name": "CollectionNotEmpty",
            "TypeFields": null,
            "Index": 43,
            "Docs": [
              "Can't delete non-empty collections."
            ]
          },
          {
            "Name": "WitnessRequired",
            "TypeFields": null,
            "Index": 44,
            "Docs": [
              "The witness data should be provided."
            ]
          }
        ],
        "Path": [
          "pallet_nfts",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "415": {
        "Variants": [
          {
            "Name": "Stored",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Uploaded",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_nft_transfer",
          "pallet",
          "NftStatus"
        ],
        "TypeDef": "Variant"
      },
      "416": {
        "Variants": [
          {
            "Name": "EmptyIpfsUrl",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "IPFS URL must not be an empty string."
            ]
          },
          {
            "Name": "DuplicateItemCode",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Item code must be different to attribute codes."
            ]
          },
          {
            "Name": "UnknownItem",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The given NFT item doesn't exist."
            ]
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given claim doesn't exist."
            ]
          },
          {
            "Name": "NftNotOwned",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The given NFT is not owned by the requester."
            ]
          },
          {
            "Name": "NftOutsideOfChain",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The given NFT is currently outside of the chain, transfer it back before attempting a",
              "restore."
            ]
          },
          {
            "Name": "ItemRestoreFailure",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The process of restoring an NFT into an item has failed."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_nft_transfer",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "417": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "418": {
        "TypeFields": [
          {
            "Name": "contracts_staked",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "contracts_claimed",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "contracts_sniped",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "contracts_cancelled",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "contracts_lost",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "contracts",
          "ContractStats"
        ],
        "TypeDef": "Composite"
      },
      "419": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 305
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 108
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "420": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 89
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "421": {
        "Variants": [
          {
            "Name": "UnknownCreator",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given creator doesn't exist."
            ]
          },
          {
            "Name": "UnknownCollection",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given collection doesn't exist."
            ]
          },
          {
            "Name": "UnknownContractCollection",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The given contract collection doesn't exist."
            ]
          },
          {
            "Name": "UnknownItem",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given item doesn't exist."
            ]
          },
          {
            "Name": "UnknownContract",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The given contract doesn't exist."
            ]
          },
          {
            "Name": "UnknownActivation",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The given contract's activation is unknown."
            ]
          },
          {
            "Name": "Ownership",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The given collection or item belongs to someone else."
            ]
          },
          {
            "Name": "ContractOwnership",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given contract belongs to someone else."
            ]
          },
          {
            "Name": "PalletLocked",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The pallet is currently locked and cannot be interacted with."
            ]
          },
          {
            "Name": "IncorrectActivation",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given contract's activation block number is set in the past."
            ]
          },
          {
            "Name": "ZeroActiveDuration",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given contract's active duration is zero. This results in immediate deactivation of",
              "newly created contracts."
            ]
          },
          {
            "Name": "ZeroClaimDuration",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given contract's claim duration is zero. This results in immediate expiry of",
              "fulfilled contracts,"
            ]
          },
          {
            "Name": "UnfulfilledFeeClause",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The given contract's fee clause is unfulfilled."
            ]
          },
          {
            "Name": "UnfulfilledStakingClause",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The given contract's staking clause is unfulfilled."
            ]
          },
          {
            "Name": "Inactive",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The contract is inactive hence cannot be accepted."
            ]
          },
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The contract is staking hence cannot be claimed or sniped."
            ]
          },
          {
            "Name": "Claimable",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The contract is claimable, so it cannot be cancelled or sniped."
            ]
          },
          {
            "Name": "Available",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The contract is available, or not yet accepted."
            ]
          },
          {
            "Name": "UnSnipeable",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Contract doesn't allow sniping."
            ]
          },
          {
            "Name": "MaxContracts",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The number of the given account's contracts exceeds maximum allowed."
            ]
          },
          {
            "Name": "MaxStakingClauses",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The number of the given contract's staking clauses exceeds maximum allowed."
            ]
          },
          {
            "Name": "MaxFeeClauses",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The number of the given contract's fee clauses exceeds maximum allowed."
            ]
          },
          {
            "Name": "InvalidNFTStakeAmount",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The number of staked NFTs doesn't match the contract specs."
            ]
          },
          {
            "Name": "InvalidNFTFeeAmount",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The number of fee NFTs doesn't match the contract specs."
            ]
          },
          {
            "Name": "MetadataTooLong",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Metadata for the contract is too long."
            ]
          },
          {
            "Name": "AttributeKeyTooLong",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "NFT attribute key bytes longer than limit."
            ]
          },
          {
            "Name": "AttributeValueTooLong",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "NFT attribute value bytes longer than limit."
            ]
          },
          {
            "Name": "NotContractHolder",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "The given account does not hold any contracts."
            ]
          },
          {
            "Name": "NotSniper",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "The given account does not meet the criteria to be a sniper."
            ]
          },
          {
            "Name": "CannotSnipeOwnContract",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "The given account attempts to snipe its own contract."
            ]
          },
          {
            "Name": "CannotClaimUnknownContract",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Cannot claim contract with unknown owner, only sniping is possible."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_nft_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "422": {
        "TypeIds": [
          0,
          423
        ],
        "TypeDef": "Tuple"
      },
      "423": {
        "Variants": [
          {
            "Name": "EggHatcher",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Sacrificer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Morpheus",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "LegendBreeder",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Promiscuous",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Buyer",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Seller",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "types",
          "AccountAchievement"
        ],
        "TypeDef": "Variant"
      },
      "424": {
        "Variants": [
          {
            "Name": "InProgress",
            "TypeFields": [
              {
                "Name": "current",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "target",
                "TypeName": "u16",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "Completed",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "types",
          "AchievementState"
        ],
        "TypeDef": "Variant"
      },
      "425": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "dna",
            "TypeName": "[[u8; 32]; 2]",
            "TypeId": 429
          },
          {
            "Name": "genesis",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "intrinsic",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "generation",
            "TypeName": "MogwaiGeneration",
            "TypeId": 426
          },
          {
            "Name": "rarity",
            "TypeName": "RarityType",
            "TypeId": 427
          },
          {
            "Name": "phase",
            "TypeName": "PhaseType",
            "TypeId": 428
          },
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "types",
          "MogwaiStruct"
        ],
        "TypeParams": [
          {
            "Name": "Hash",
            "TypeId": 12
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MogwaiGeneration",
            "TypeId": 426
          },
          {
            "Name": "RarityType",
            "TypeId": 427
          },
          {
            "Name": "PhaseType",
            "TypeId": 428
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "426": {
        "Variants": [
          {
            "Name": "First",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Second",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Third",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Fourth",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Fifth",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Sixth",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Seventh",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Eighth",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Ninth",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "Tenth",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Eleventh",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Twelfth",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Thirteenth",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Fourteenth",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Fifteenth",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "Sixteenth",
            "TypeFields": null,
            "Index": 16
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "types",
          "MogwaiGeneration"
        ],
        "TypeDef": "Variant"
      },
      "427": {
        "Variants": [
          {
            "Name": "Common",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Uncommon",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Rare",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Epic",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Legendary",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Mythical",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "types",
          "RarityType"
        ],
        "TypeDef": "Variant"
      },
      "428": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Bred",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Hatched",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Matured",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Mastered",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Exalted",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "types",
          "PhaseType"
        ],
        "TypeDef": "Variant"
      },
      "429": {
        "Length": 2,
        "TypeId": 1,
        "TypeDef": "Array"
      },
      "430": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 431
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "431": {
        "TypeFields": [
          {
            "TypeId": 89
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "432": {
        "Variants": [
          {
            "Name": "NoOrganizer",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "No organizer set."
            ]
          },
          {
            "Name": "ConfigIndexOutOfRange",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The submitted index is out of range."
            ]
          },
          {
            "Name": "ConfigUpdateInvalid",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid or unimplemented config update."
            ]
          },
          {
            "Name": "PriceInvalid",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Price for config updated not set."
            ]
          },
          {
            "Name": "FounderAction",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Founder action only."
            ]
          },
          {
            "Name": "MogwaiNotForSale",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Mogwai is not for sale"
            ]
          },
          {
            "Name": "MogwaiDoesntExists",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The mogwais hash doesn't exist."
            ]
          },
          {
            "Name": "MaxMogwaisInAccount",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Maximum Mogwais in account reached."
            ]
          },
          {
            "Name": "MogwaiAlreadyExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The mogwai id (hash) already exists."
            ]
          },
          {
            "Name": "MogwaiNotOwned",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The mogwai isn't owned by the sender."
            ]
          },
          {
            "Name": "MogwaiAlreadyOwned",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The mogwai is already owned by the sender."
            ]
          },
          {
            "Name": "MogwaiBadRarity",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The mogwai hasn't the necessary rarity."
            ]
          },
          {
            "Name": "MogwaiSame",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Same mogwai chosen for extrinsic."
            ]
          },
          {
            "Name": "MogwaiNoHatch",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Can't hatch mogwai."
            ]
          },
          {
            "Name": "MogwaiIsOnSale",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Can't perform specified action while mogwai is on sale."
            ]
          },
          {
            "Name": "MogwaiNotAffordable",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified mogwai sells for more than what the sender wants to pay."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_battle_mogs",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "433": {
        "TypeFields": [
          {
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 168
          },
          {
            "Name": "Call",
            "TypeId": 192
          },
          {
            "Name": "Signature",
            "TypeId": 280
          },
          {
            "Name": "Extra",
            "TypeId": 434
          }
        ],
        "TypeDef": "Composite"
      },
      "434": {
        "TypeIds": [
          435,
          436,
          437,
          438,
          439,
          441,
          442,
          443
        ],
        "TypeDef": "Tuple"
      },
      "435": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "436": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "437": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "438": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "439": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 440
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "440": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "441": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 115
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "442": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "443": {
        "TypeFields": [
          {
            "Name": "tip",
            "TypeName": "BalanceOf<T>",
            "TypeId": 44
          },
          {
            "Name": "asset_id",
            "TypeName": "Option<ChargeAssetIdOf<T>>",
            "TypeId": 39
          }
        ],
        "Path": [
          "pallet_asset_tx_payment",
          "ChargeAssetTxPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "444": {
        "Path": [
          "ajuna_solo_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 18,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 113
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 114,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 41,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 41,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 112,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 117
        },
        "Events": {
          "TypeId": 21
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 121,
            "Value": "AlsfXQALACBKqdEBE///////////wqCpHQABC9Bfn6YuARNmZmZmZmZmpgELAJj3Pl0BE/////////+/AQAAwqCpHQABC9Dn8RCjARNmZmZmZmZm5gELACBKqdEBE///////////AQcAiFJqdBMAAAAAAAAAQMKgqR0AAAAA",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 125,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 127,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 128,
            "Value": "KGFqdW5hLW5vZGUoYWp1bmEtbm9kZQEAAABkAAAAAQAAACjfastomQdgmwQAAAA345f8fJH15AIAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAADdcY1cxTJi1AEAAACrPAVyKR/riwEAAADtmcWssl7t9QMAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAQAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 63,
            "Value": "KgA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 133
        },
        "Index": 0
      },
      "1": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 41,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 134
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 11,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 135,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 139,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "Grandpa",
        "Storage": {
          "Prefix": "Grandpa",
          "Entries": [
            {
              "Name": "State",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 140,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " State of the current authority set."
              ]
            },
            {
              "Name": "PendingChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 141,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending change: (signaled at, scheduled change)."
              ]
            },
            {
              "Name": "NextForced",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " next block number where we can force a change."
              ]
            },
            {
              "Name": "Stalled",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 58,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `true` if we are currently stalled."
              ]
            },
            {
              "Name": "CurrentSetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                " in the \"set\" of Grandpa validators from genesis."
              ]
            },
            {
              "Name": "SetIdSession",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `SetId` is not under user control."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 143
        },
        "Events": {
          "TypeId": 30
        },
        "Constants": [
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max Authorities in use"
            ]
          },
          {
            "Name": "MaxNominators",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum number of nominators for each validator."
            ]
          },
          {
            "Name": "MaxSetIdSessionEntries",
            "TypeId": 11,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "Errors": {
          "TypeId": 156
        },
        "Index": 3
      },
      "4": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 157
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 161
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 164
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 164
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 167
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "oIYBAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "QEIPAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "QEIPAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          },
          {
            "Name": "MaxHolds",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of holds that can exist on an account at any time."
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 172
        },
        "Index": 4
      },
      "5": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 173,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 174,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 37
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 5
      },
      "6": {
        "Name": "AssetTxPayment",
        "Storage": null,
        "Calls": null,
        "Events": {
          "TypeId": 38
        },
        "Constants": [],
        "Errors": null,
        "Index": 6
      },
      "7": {
        "Name": "Assets",
        "Storage": {
          "Prefix": "Assets",
          "Entries": [
            {
              "Name": "Asset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 175
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of an asset."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 177,
                  "Value": 178
                }
              },
              "Default": "AA==",
              "Docs": [
                " The holdings of a specific account for a specific asset."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 181,
                  "Value": 182
                }
              },
              "Default": "AA==",
              "Docs": [
                " Approved balance transfers. First balance is the amount approved for transfer. Second",
                " is the amount of `T::Currency` reserved for storing this.",
                " First key is the asset ID, second key is the owner and third key is the delegate."
              ]
            },
            {
              "Name": "Metadata",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 183
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Metadata of an asset."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 185
        },
        "Events": {
          "TypeId": 40
        },
        "Constants": [
          {
            "Name": "RemoveItemsLimit",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "Name": "AssetDeposit",
            "TypeId": 6,
            "Value": "/////////////////////w==",
            "Docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "Name": "AssetAccountDeposit",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "Name": "MetadataDepositPerByte",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "Name": "ApprovalDeposit",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 186
        },
        "Index": 7
      },
      "8": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "VestingSchedules",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 187
                }
              },
              "Default": "AA==",
              "Docs": [
                " Vesting schedules of an account.",
                "",
                " VestingSchedules: map AccountId => Vec<VestingSchedule>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 189
        },
        "Events": {
          "TypeId": 42
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AOH1BQAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 190
        },
        "Index": 8
      },
      "9": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 191,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 192
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 308
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 171,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 193
        },
        "Events": {
          "TypeId": 45
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 9,
            "Value": "BwAQpdToE/////////9/",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 309
        },
        "Index": 9
      },
      "10": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 191,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 192
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 308
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 171,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 194
        },
        "Events": {
          "TypeId": 48
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 9,
            "Value": "BwAQpdToE/////////9/",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 310
        },
        "Index": 10
      },
      "11": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 311
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 76,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 195
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 312,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 267,
            "Value": "AQCAxqR+jQMAAAAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 312,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 313,
            "Value": "YWovdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 314
        },
        "Index": 11
      },
      "12": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 315,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 318
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 320
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 323
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 41,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 329,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 330
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 41
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 54,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 196
        },
        "Events": {
          "TypeId": 50
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 41,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "wKgAAA==",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 331
        },
        "Index": 12
      },
      "13": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 200
        },
        "Events": {
          "TypeId": 55
        },
        "Constants": [],
        "Errors": {
          "TypeId": 332
        },
        "Index": 13
      },
      "14": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 333
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 58
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 201
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 9,
            "Value": "CwCAbod0ARPMzMzMzMzMzA==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 337
        },
        "Index": 14
      },
      "15": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 338
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 239
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 342
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 344,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 203
        },
        "Events": {
          "TypeId": 60
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "Name": "FieldDeposit",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "ALhk2UUAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxAdditionalFields",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "Errors": {
          "TypeId": 348
        },
        "Index": 15
      },
      "16": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 349
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 353
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 243
        },
        "Events": {
          "TypeId": 61
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "AIhSanQAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "ANDtkC4AAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 357
        },
        "Index": 16
      },
      "17": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 358,
                  "Value": 359
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 245
        },
        "Events": {
          "TypeId": 64
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "ALAaGkUSAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AEBZcwcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 361
        },
        "Index": 17
      },
      "18": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 247
        },
        "Events": {
          "TypeId": 66
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 362
        },
        "Index": 18
      },
      "19": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 363
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 366,
                  "Value": 367
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 253
        },
        "Events": {
          "TypeId": 67
        },
        "Constants": [],
        "Errors": {
          "TypeId": 368
        },
        "Index": 19
      },
      "22": {
        "Name": "AwesomeAvatars",
        "Storage": {
          "Prefix": "AwesomeAvatars",
          "Entries": [
            {
              "Name": "Organizer",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Treasurer",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 63,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "WhitelistedAccounts",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 369,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " List of accounts allowed to transfer free mints.",
                " A maximum of 3 different accounts can be on the list."
              ]
            },
            {
              "Name": "CurrentSeasonStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 370,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAA",
              "Docs": []
            },
            {
              "Name": "Seasons",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 63,
                  "Value": 69
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for the seasons."
              ]
            },
            {
              "Name": "Treasury",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 63,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "GlobalConfigs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 81,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "Avatars",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 371
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Owners",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 374,
                  "Value": 375
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "LockedAvatars",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 47
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "CollectionId",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "PlayerConfigs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 376
                }
              },
              "Default": "AAA=",
              "Docs": []
            },
            {
              "Name": "PlayerSeasonConfigs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 374,
                  "Value": 377
                }
              },
              "Default": "GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": []
            },
            {
              "Name": "SeasonStats",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 385,
                  "Value": 386
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "Trade",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 387,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ServiceAccount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Preparation",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 92
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 254
        },
        "Events": {
          "TypeId": 68
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 313,
            "Value": "YWovYWFhdHI=",
            "Docs": []
          },
          {
            "Name": "KeyLimit",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "Name": "ValueLimit",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " The maximum length of an attribute value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 388
        },
        "Index": 22
      },
      "23": {
        "Name": "Randomness",
        "Storage": {
          "Prefix": "Randomness",
          "Entries": [
            {
              "Name": "RandomMaterial",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 389,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                " the oldest hash."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 23
      },
      "24": {
        "Name": "Nft",
        "Storage": {
          "Prefix": "Nft",
          "Entries": [
            {
              "Name": "Collection",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 390
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of a collection."
              ]
            },
            {
              "Name": "OwnershipAcceptance",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collection, if any, of which an account is willing to take ownership."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 391,
                  "Value": 47
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items held by any given account; set out this way so that items owned by a single",
                " account can be enumerated."
              ]
            },
            {
              "Name": "CollectionAccount",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 392,
                  "Value": 47
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collections owned by any given account; set out this way so that collections owned by",
                " a single account can be enumerated."
              ]
            },
            {
              "Name": "CollectionRoleOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 177,
                  "Value": 393
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items in existence and their ownership details.",
                " Stores collection roles as per account."
              ]
            },
            {
              "Name": "Item",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 395,
                  "Value": 396
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items in existence and their ownership details."
              ]
            },
            {
              "Name": "CollectionMetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 402
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of a collection."
              ]
            },
            {
              "Name": "ItemMetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 395,
                  "Value": 403
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of an item."
              ]
            },
            {
              "Name": "Attribute",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 405,
                  "Value": 406
                }
              },
              "Default": "AA==",
              "Docs": [
                " Attributes of a collection."
              ]
            },
            {
              "Name": "ItemPriceOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 395,
                  "Value": 408
                }
              },
              "Default": "AA==",
              "Docs": [
                " A price of an item."
              ]
            },
            {
              "Name": "ItemAttributesApprovalsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 395,
                  "Value": 409
                }
              },
              "Default": "AA==",
              "Docs": [
                " Item attribute approvals."
              ]
            },
            {
              "Name": "NextCollectionId",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `CollectionId` that is going to be used for the next collection.",
                " This gets incremented whenever a new collection is created."
              ]
            },
            {
              "Name": "PendingSwapOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 395,
                  "Value": 411
                }
              },
              "Default": "AA==",
              "Docs": [
                " Handles all the pending swaps."
              ]
            },
            {
              "Name": "CollectionConfigOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 262
                }
              },
              "Default": "AA==",
              "Docs": [
                " Config of a collection."
              ]
            },
            {
              "Name": "ItemConfigOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 395,
                  "Value": 273
                }
              },
              "Default": "AA==",
              "Docs": [
                " Config of an item."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 261
        },
        "Events": {
          "TypeId": 93
        },
        "Constants": [
          {
            "Name": "CollectionDeposit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "Name": "ItemDeposit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "Name": "AttributeDepositBase",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "Name": "DepositPerByte",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "Name": "KeyLimit",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "Name": "ValueLimit",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " The maximum length of an attribute value."
            ]
          },
          {
            "Name": "ApprovalsLimit",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " The maximum approvals an item could have."
            ]
          },
          {
            "Name": "ItemAttributesApprovalsLimit",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum attributes approvals an item could have."
            ]
          },
          {
            "Name": "MaxTips",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " The max number of tips a user could send."
            ]
          },
          {
            "Name": "MaxDeadlineDuration",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " The max duration in blocks for deadlines."
            ]
          },
          {
            "Name": "MaxAttributesPerCall",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The max number of attributes a user could set per call."
            ]
          },
          {
            "Name": "Features",
            "TypeId": 412,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " Disables some of pallet's features."
            ]
          }
        ],
        "Errors": {
          "TypeId": 414
        },
        "Index": 24
      },
      "25": {
        "Name": "NftTransfer",
        "Storage": {
          "Prefix": "NftTransfer",
          "Entries": [
            {
              "Name": "NftStatuses",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 395,
                  "Value": 415
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 103
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 313,
            "Value": "YWovbmZ0dHI=",
            "Docs": [
              " The NFT-transfer's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "KeyLimit",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "Name": "ValueLimit",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " The maximum length of an attribute value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 416
        },
        "Index": 25
      },
      "26": {
        "Name": "NftStaking",
        "Storage": {
          "Prefix": "NftStaking",
          "Entries": [
            {
              "Name": "Creator",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "GlobalConfigs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 105,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ContractCollectionId",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Contracts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 286
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ContractsMetadata",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 417
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ContractsAttributes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 293
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ContractsStats",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 418
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "ContractAccepted",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ContractStakedItems",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 419
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ContractIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 420
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 285
        },
        "Events": {
          "TypeId": 104
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 313,
            "Value": "YWovbmZ0c3Q=",
            "Docs": [
              " The NFT-staking's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxContracts",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of contracts an account can have."
            ]
          },
          {
            "Name": "MaxStakingClauses",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum number of staking clauses a contract can have."
            ]
          },
          {
            "Name": "MaxFeeClauses",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum number of fee clauses a contract can have."
            ]
          },
          {
            "Name": "MaxMetadataLength",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of bytes used for a contract's metadata."
            ]
          },
          {
            "Name": "KeyLimit",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "Name": "ValueLimit",
            "TypeId": 4,
            "Value": "QAAAAA==",
            "Docs": [
              " The maximum length of an attribute value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 421
        },
        "Index": 26
      },
      "27": {
        "Name": "BattleMogs",
        "Storage": {
          "Prefix": "BattleMogs",
          "Entries": [
            {
              "Name": "Organizer",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountConfig",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 111
                }
              },
              "Default": "AA==",
              "Docs": [
                " A map of the current configuration of an account."
              ]
            },
            {
              "Name": "AccountAchievements",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 422,
                  "Value": 424
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Mogwais",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 425
                }
              },
              "Default": "AA==",
              "Docs": [
                " A map of mogwais accessible by the mogwai hash."
              ]
            },
            {
              "Name": "MogwaiPrices",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " A map of mogwais that are up for sale."
              ]
            },
            {
              "Name": "AllMogwaisCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " A count over all existing mogwais in the system."
              ]
            },
            {
              "Name": "Owners",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 430
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "OwnedMogwaisCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 11
                }
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " A count over all existing mogwais owned by one account."
              ]
            },
            {
              "Name": "Nonce",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Nonce used for generating a different seed each time."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 306
        },
        "Events": {
          "TypeId": 110
        },
        "Constants": [],
        "Errors": {
          "TypeId": 432
        },
        "Index": 27
      }
    },
    "Extrinsic": {
      "TypeId": 433,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 435,
          "AddSignedExtType": 47
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 436,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 437,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 438,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 439,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 441,
          "AddSignedExtType": 47
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 442,
          "AddSignedExtType": 47
        },
        {
          "SignedIdentifier": "ChargeAssetTxPayment",
          "SignedExtType": 443,
          "AddSignedExtType": 47
        }
      ]
    },
    "TypeId": 444
  }
}